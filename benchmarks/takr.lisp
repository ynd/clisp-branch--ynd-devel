;;; TAKR  -- 100 function (count `em) version of TAK that tries to defeat cache
;;; memory effects.  Results should be the same as for TAK on stack machines.
;;; Distribution of calls is not completely flat.

;;; call:  (tak0 18. 12. 6.)    

(defun tak0 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak1 (tak37 (the fixnum (1- x)) y z)
                 (tak11 (the fixnum (1- y)) z x)
                 (tak17 (the fixnum (1- z)) x y)))))
(defun tak1 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak2 (tak74 (the fixnum (1- x)) y z)
                 (tak22 (the fixnum (1- y)) z x)
                 (tak34 (the fixnum (1- z)) x y)))))
(defun tak2 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak3 (tak11 (the fixnum (1- x)) y z)
                 (tak33 (the fixnum (1- y)) z x)
                 (tak51 (the fixnum (1- z)) x y)))))
(defun tak3 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak4 (tak48 (the fixnum (1- x)) y z)
                 (tak44 (the fixnum (1- y)) z x)
                 (tak68 (the fixnum (1- z)) x y)))))
(defun tak4 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak5 (tak85 (the fixnum (1- x)) y z)
                 (tak55 (the fixnum (1- y)) z x)
                 (tak85 (the fixnum (1- z)) x y)))))
(defun tak5 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak6 (tak22 (the fixnum (1- x)) y z)
                 (tak66 (the fixnum (1- y)) z x)
                 (tak2 (the fixnum (1- z)) x y)))))
(defun tak6 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak7 (tak59 (the fixnum (1- x)) y z)
                 (tak77 (the fixnum (1- y)) z x)
                 (tak19 (the fixnum (1- z)) x y)))))
(defun tak7 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak8 (tak96 (the fixnum (1- x)) y z)
                 (tak88 (the fixnum (1- y)) z x)
                 (tak36 (the fixnum (1- z)) x y)))))
(defun tak8 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak9 (tak33 (the fixnum (1- x)) y z)
                 (tak99 (the fixnum (1- y)) z x)
                 (tak53 (the fixnum (1- z)) x y)))))
(defun tak9 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak10 (tak70 (the fixnum (1- x)) y z)
                  (tak10 (the fixnum (1- y)) z x)
                  (tak70 (the fixnum (1- z)) x y)))))
(defun tak10 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak11 (tak7 (the fixnum (1- x)) y z)
                  (tak21 (the fixnum (1- y)) z x)
                  (tak87 (the fixnum (1- z)) x y)))))
(defun tak11 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak12 (tak44 (the fixnum (1- x)) y z)
                  (tak32 (the fixnum (1- y)) z x)
                  (tak4 (the fixnum (1- z)) x y)))))
(defun tak12 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak13 (tak81 (the fixnum (1- x)) y z)
                  (tak43 (the fixnum (1- y)) z x)
                  (tak21 (the fixnum (1- z)) x y)))))

(defun tak13 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak14 (tak18 (the fixnum (1- x)) y z)
                  (tak54 (the fixnum (1- y)) z x)
                  (tak38 (the fixnum (1- z)) x y)))))
(defun tak14 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak15 (tak55 (the fixnum (1- x)) y z)
                  (tak65 (the fixnum (1- y)) z x)
                  (tak55 (the fixnum (1- z)) x y)))))
(defun tak15 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak16 (tak92 (the fixnum (1- x)) y z)
                  (tak76 (the fixnum (1- y)) z x)
                  (tak72 (the fixnum (1- z)) x y)))))
(defun tak16 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak17 (tak29 (the fixnum (1- x)) y z)
                  (tak87 (the fixnum (1- y)) z x)
                  (tak89 (the fixnum (1- z)) x y)))))
(defun tak17 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak18 (tak66 (the fixnum (1- x)) y z)
                  (tak98 (the fixnum (1- y)) z x)
                  (tak6 (the fixnum (1- z)) x y)))))
(defun tak18 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak19 (tak3 (the fixnum (1- x)) y z)
                  (tak9 (the fixnum (1- y)) z x)
                  (tak23 (the fixnum (1- z)) x y)))))
(defun tak19 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak20 (tak40 (the fixnum (1- x)) y z)
                  (tak20 (the fixnum (1- y)) z x)
                  (tak40 (the fixnum (1- z)) x y)))))
(defun tak20 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak21 (tak77 (the fixnum (1- x)) y z)
                  (tak31 (the fixnum (1- y)) z x)
                  (tak57 (the fixnum (1- z)) x y)))))
(defun tak21 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak22 (tak14 (the fixnum (1- x)) y z)
                  (tak42 (the fixnum (1- y)) z x)
                  (tak74 (the fixnum (1- z)) x y)))))
(defun tak22 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak23 (tak51 (the fixnum (1- x)) y z)
                  (tak53 (the fixnum (1- y)) z x)
                  (tak91 (the fixnum (1- z)) x y)))))
(defun tak23 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak24 (tak88 (the fixnum (1- x)) y z)
                  (tak64 (the fixnum (1- y)) z x)
                  (tak8 (the fixnum (1- z)) x y)))))
(defun tak24 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak25 (tak25 (the fixnum (1- x)) y z)
                  (tak75 (the fixnum (1- y)) z x)
                  (tak25 (the fixnum (1- z)) x y)))))
(defun tak25 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak26 (tak62 (the fixnum (1- x)) y z)
                  (tak86 (the fixnum (1- y)) z x)
                  (tak42 (the fixnum (1- z)) x y)))))
(defun tak26 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak27 (tak99 (the fixnum (1- x)) y z)
                  (tak97 (the fixnum (1- y)) z x)
                  (tak59 (the fixnum (1- z)) x y)))))
(defun tak27 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak28 (tak36 (the fixnum (1- x)) y z)
                  (tak8 (the fixnum (1- y)) z x)
                  (tak76 (the fixnum (1- z)) x y)))))
(defun tak28 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak29 (tak73 (the fixnum (1- x)) y z)
                  (tak19 (the fixnum (1- y)) z x)
                  (tak93 (the fixnum (1- z)) x y)))))
(defun tak29 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak30 (tak10 (the fixnum (1- x)) y z)
                  (tak30 (the fixnum (1- y)) z x)
                  (tak10 (the fixnum (1- z)) x y)))))
(defun tak30 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak31 (tak47 (the fixnum (1- x)) y z)
                  (tak41 (the fixnum (1- y)) z x)
                  (tak27 (the fixnum (1- z)) x y)))))
(defun tak31 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak32 (tak84 (the fixnum (1- x)) y z)
                  (tak52 (the fixnum (1- y)) z x)
                  (tak44 (the fixnum (1- z)) x y)))))
(defun tak32 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak33 (tak21 (the fixnum (1- x)) y z)
                  (tak63 (the fixnum (1- y)) z x)
                  (tak61 (the fixnum (1- z)) x y)))))
(defun tak33 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak34 (tak58 (the fixnum (1- x)) y z)
                  (tak74 (the fixnum (1- y)) z x)
                  (tak78 (the fixnum (1- z)) x y)))))
(defun tak34 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak35 (tak95 (the fixnum (1- x)) y z)
                  (tak85 (the fixnum (1- y)) z x)
                  (tak95 (the fixnum (1- z)) x y)))))
(defun tak35 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak36 (tak32 (the fixnum (1- x)) y z)
                  (tak96 (the fixnum (1- y)) z x)
                  (tak12 (the fixnum (1- z)) x y)))))
(defun tak36 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak37 (tak69 (the fixnum (1- x)) y z)
                  (tak7 (the fixnum (1- y)) z x)
                  (tak29 (the fixnum (1- z)) x y)))))
(defun tak37 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak38 (tak6 (the fixnum (1- x)) y z)
                  (tak18 (the fixnum (1- y)) z x)
                  (tak46 (the fixnum (1- z)) x y)))))
(defun tak38 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak39 (tak43 (the fixnum (1- x)) y z)
                  (tak29 (the fixnum (1- y)) z x)
                  (tak63 (the fixnum (1- z)) x y)))))
(defun tak39 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak40 (tak80 (the fixnum (1- x)) y z)
                  (tak40 (the fixnum (1- y)) z x)
                  (tak80 (the fixnum (1- z)) x y)))))
(defun tak40 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak41 (tak17 (the fixnum (1- x)) y z)
                  (tak51 (the fixnum (1- y)) z x)
                  (tak97 (the fixnum (1- z)) x y)))))
(defun tak41 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak42 (tak54 (the fixnum (1- x)) y z)
                  (tak62 (the fixnum (1- y)) z x)
                  (tak14 (the fixnum (1- z)) x y)))))
(defun tak42 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak43 (tak91 (the fixnum (1- x)) y z)
                  (tak73 (the fixnum (1- y)) z x)
                  (tak31 (the fixnum (1- z)) x y)))))
(defun tak43 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak44 (tak28 (the fixnum (1- x)) y z)
                  (tak84 (the fixnum (1- y)) z x)
                  (tak48 (the fixnum (1- z)) x y)))))
(defun tak44 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak45 (tak65 (the fixnum (1- x)) y z)
                  (tak95 (the fixnum (1- y)) z x)
                  (tak65 (the fixnum (1- z)) x y)))))
(defun tak45 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak46 (tak2 (the fixnum (1- x)) y z)
                  (tak6 (the fixnum (1- y)) z x)
                  (tak82 (the fixnum (1- z)) x y)))))
(defun tak46 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak47 (tak39 (the fixnum (1- x)) y z)
                  (tak17 (the fixnum (1- y)) z x)
                  (tak99 (the fixnum (1- z)) x y)))))
(defun tak47 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak48 (tak76 (the fixnum (1- x)) y z)
                  (tak28 (the fixnum (1- y)) z x)
                  (tak16 (the fixnum (1- z)) x y)))))
(defun tak48 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak49 (tak13 (the fixnum (1- x)) y z)
                  (tak39 (the fixnum (1- y)) z x)
                  (tak33 (the fixnum (1- z)) x y)))))
(defun tak49 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak50 (tak50 (the fixnum (1- x)) y z)
                  (tak50 (the fixnum (1- y)) z x)
                  (tak50 (the fixnum (1- z)) x y)))))
(defun tak50 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak51 (tak87 (the fixnum (1- x)) y z)
                  (tak61 (the fixnum (1- y)) z x)
                  (tak67 (the fixnum (1- z)) x y)))))
(defun tak51 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak52 (tak24 (the fixnum (1- x)) y z)
                  (tak72 (the fixnum (1- y)) z x)
                  (tak84 (the fixnum (1- z)) x y)))))
(defun tak52 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak53 (tak61 (the fixnum (1- x)) y z)
                  (tak83 (the fixnum (1- y)) z x)
                  (tak1 (the fixnum (1- z)) x y)))))
(defun tak53 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak54 (tak98 (the fixnum (1- x)) y z)
                  (tak94 (the fixnum (1- y)) z x)
                  (tak18 (the fixnum (1- z)) x y)))))
(defun tak54 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak55 (tak35 (the fixnum (1- x)) y z)
                  (tak5 (the fixnum (1- y)) z x)
                  (tak35 (the fixnum (1- z)) x y)))))
(defun tak55 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak56 (tak72 (the fixnum (1- x)) y z)
                  (tak16 (the fixnum (1- y)) z x)
                  (tak52 (the fixnum (1- z)) x y)))))
(defun tak56 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak57 (tak9 (the fixnum (1- x)) y z)
                  (tak27 (the fixnum (1- y)) z x)
                  (tak69 (the fixnum (1- z)) x y)))))
(defun tak57 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak58 (tak46 (the fixnum (1- x)) y z)
                  (tak38 (the fixnum (1- y)) z x)
                  (tak86 (the fixnum (1- z)) x y)))))
(defun tak58 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak59 (tak83 (the fixnum (1- x)) y z)
                  (tak49 (the fixnum (1- y)) z x)
                  (tak3 (the fixnum (1- z)) x y)))))
(defun tak59 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak60 (tak20 (the fixnum (1- x)) y z)
                  (tak60 (the fixnum (1- y)) z x)
                  (tak20 (the fixnum (1- z)) x y)))))
(defun tak60 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak61 (tak57 (the fixnum (1- x)) y z)
                  (tak71 (the fixnum (1- y)) z x)
                  (tak37 (the fixnum (1- z)) x y)))))
(defun tak61 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak62 (tak94 (the fixnum (1- x)) y z)
                  (tak82 (the fixnum (1- y)) z x)
                  (tak54 (the fixnum (1- z)) x y)))))
(defun tak62 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak63 (tak31 (the fixnum (1- x)) y z)
                  (tak93 (the fixnum (1- y)) z x)
                  (tak71 (the fixnum (1- z)) x y)))))
(defun tak63 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak64 (tak68 (the fixnum (1- x)) y z)
                  (tak4 (the fixnum (1- y)) z x)
                  (tak88 (the fixnum (1- z)) x y)))))
(defun tak64 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak65 (tak5 (the fixnum (1- x)) y z)
                  (tak15 (the fixnum (1- y)) z x)
                  (tak5 (the fixnum (1- z)) x y)))))
(defun tak65 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak66 (tak42 (the fixnum (1- x)) y z)
                  (tak26 (the fixnum (1- y)) z x)
                  (tak22 (the fixnum (1- z)) x y)))))
(defun tak66 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak67 (tak79 (the fixnum (1- x)) y z)
                  (tak37 (the fixnum (1- y)) z x)
                  (tak39 (the fixnum (1- z)) x y)))))
(defun tak67 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak68 (tak16 (the fixnum (1- x)) y z)
                  (tak48 (the fixnum (1- y)) z x)
                  (tak56 (the fixnum (1- z)) x y)))))
(defun tak68 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak69 (tak53 (the fixnum (1- x)) y z)
                  (tak59 (the fixnum (1- y)) z x)
                  (tak73 (the fixnum (1- z)) x y)))))
(defun tak69 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak70 (tak90 (the fixnum (1- x)) y z)
                  (tak70 (the fixnum (1- y)) z x)
                  (tak90 (the fixnum (1- z)) x y)))))
(defun tak70 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak71 (tak27 (the fixnum (1- x)) y z)
                  (tak81 (the fixnum (1- y)) z x)
                  (tak7 (the fixnum (1- z)) x y)))))
(defun tak71 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak72 (tak64 (the fixnum (1- x)) y z)
                  (tak92 (the fixnum (1- y)) z x)
                  (tak24 (the fixnum (1- z)) x y)))))
(defun tak72 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak73 (tak1 (the fixnum (1- x)) y z)
                  (tak3 (the fixnum (1- y)) z x)
                  (tak41 (the fixnum (1- z)) x y)))))
(defun tak73 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak74 (tak38 (the fixnum (1- x)) y z)
                  (tak14 (the fixnum (1- y)) z x)
                  (tak58 (the fixnum (1- z)) x y)))))
(defun tak74 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak75 (tak75 (the fixnum (1- x)) y z)
                  (tak25 (the fixnum (1- y)) z x)
                  (tak75 (the fixnum (1- z)) x y)))))
(defun tak75 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak76 (tak12 (the fixnum (1- x)) y z)
                  (tak36 (the fixnum (1- y)) z x)
                  (tak92 (the fixnum (1- z)) x y)))))
(defun tak76 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak77 (tak49 (the fixnum (1- x)) y z)
                  (tak47 (the fixnum (1- y)) z x)
                  (tak9 (the fixnum (1- z)) x y)))))
(defun tak77 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak78 (tak86 (the fixnum (1- x)) y z)
                  (tak58 (the fixnum (1- y)) z x)
                  (tak26 (the fixnum (1- z)) x y)))))
(defun tak78 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak79 (tak23 (the fixnum (1- x)) y z)
                  (tak69 (the fixnum (1- y)) z x)
                  (tak43 (the fixnum (1- z)) x y)))))
(defun tak79 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak80 (tak60 (the fixnum (1- x)) y z)
                  (tak80 (the fixnum (1- y)) z x)
                  (tak60 (the fixnum (1- z)) x y)))))
(defun tak80 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak81 (tak97 (the fixnum (1- x)) y z)
                  (tak91 (the fixnum (1- y)) z x)
                  (tak77 (the fixnum (1- z)) x y)))))
(defun tak81 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak82 (tak34 (the fixnum (1- x)) y z)
                  (tak2 (the fixnum (1- y)) z x)
                  (tak94 (the fixnum (1- z)) x y)))))
(defun tak82 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak83 (tak71 (the fixnum (1- x)) y z)
                  (tak13 (the fixnum (1- y)) z x)
                  (tak11 (the fixnum (1- z)) x y)))))
(defun tak83 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak84 (tak8 (the fixnum (1- x)) y z)
                  (tak24 (the fixnum (1- y)) z x)
                  (tak28 (the fixnum (1- z)) x y)))))
(defun tak84 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak85 (tak45 (the fixnum (1- x)) y z)
                  (tak35 (the fixnum (1- y)) z x)
                  (tak45 (the fixnum (1- z)) x y)))))
(defun tak85 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak86 (tak82 (the fixnum (1- x)) y z)
                  (tak46 (the fixnum (1- y)) z x)
                  (tak62 (the fixnum (1- z)) x y)))))
(defun tak86 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak87 (tak19 (the fixnum (1- x)) y z)
                  (tak57 (the fixnum (1- y)) z x)
                  (tak79 (the fixnum (1- z)) x y)))))
(defun tak87 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak88 (tak56 (the fixnum (1- x)) y z)
                  (tak68 (the fixnum (1- y)) z x)
                  (tak96 (the fixnum (1- z)) x y)))))
(defun tak88 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak89 (tak93 (the fixnum (1- x)) y z)
                  (tak79 (the fixnum (1- y)) z x)
                  (tak13 (the fixnum (1- z)) x y)))))
(defun tak89 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak90 (tak30 (the fixnum (1- x)) y z)
                  (tak90 (the fixnum (1- y)) z x)
                  (tak30 (the fixnum (1- z)) x y)))))
(defun tak90 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak91 (tak67 (the fixnum (1- x)) y z)
                  (tak1 (the fixnum (1- y)) z x)
                  (tak47 (the fixnum (1- z)) x y)))))
(defun tak91 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak92 (tak4 (the fixnum (1- x)) y z)
                  (tak12 (the fixnum (1- y)) z x)
                  (tak64 (the fixnum (1- z)) x y)))))
(defun tak92 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak93 (tak41 (the fixnum (1- x)) y z)
                  (tak23 (the fixnum (1- y)) z x)
                  (tak81 (the fixnum (1- z)) x y)))))
(defun tak93 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak94 (tak78 (the fixnum (1- x)) y z)
                  (tak34 (the fixnum (1- y)) z x)
                  (tak98 (the fixnum (1- z)) x y)))))
(defun tak94 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak95 (tak15 (the fixnum (1- x)) y z)
                  (tak45 (the fixnum (1- y)) z x)
                  (tak15 (the fixnum (1- z)) x y)))))
(defun tak95 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak96 (tak52 (the fixnum (1- x)) y z)
                  (tak56 (the fixnum (1- y)) z x)
                  (tak32 (the fixnum (1- z)) x y)))))
(defun tak96 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak97 (tak89 (the fixnum (1- x)) y z)
                  (tak67 (the fixnum (1- y)) z x)
                  (tak49 (the fixnum (1- z)) x y)))))
(defun tak97 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak98 (tak26 (the fixnum (1- x)) y z)
                  (tak78 (the fixnum (1- y)) z x)
                  (tak66 (the fixnum (1- z)) x y)))))
(defun tak98 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak99 (tak63 (the fixnum (1- x)) y z)
                  (tak89 (the fixnum (1- y)) z x)
                  (tak83 (the fixnum (1- z)) x y)))))
(defun tak99 (x y z) 
  (declare (type fixnum x y z))
  (cond ((not (< y x)) z)
        (t (tak0 (tak0 (the fixnum (1- x)) y z)
                 (tak0 (the fixnum (1- y)) z x)
                 (tak0 (the fixnum (1- z)) x y)))))

