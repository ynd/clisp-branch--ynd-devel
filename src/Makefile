# -*- Makefile -*- for the CLISP binaries
# DO NOT EDIT! GENERATED AUTOMATICALLY!
# This file was created on host Macintosh.local as the output of the command:
# ./makemake --with-jitc=llvm

# -------------- Start of configurable section --------------------

# The official version number
PACKAGE_VERSION=2.45 (2008-05-15)
VERSION=2.45
# The official package name
PACKAGE_NAME=GNU CLISP
# If you want to distribute a modified version of CLISP,
# use this to distinguish your distribution from the official one.
# This can also be used for pre-test and post-release distributions:
#   make distrib VERSION_SUFFIX=pre
VERSION_SUFFIX=
# The distribution's top directory
TOPDIR=clisp-$(VERSION)$(VERSION_SUFFIX)

# Directories used by "make install":
prefix = /usr/local
exec_prefix = $(prefix)
bindir  = $(exec_prefix)/bin
datarootdir = $(prefix)/share
mandir  = $(datarootdir)/man
docdir  = $(prefix)/share/doc/
htmldir = $(docdir)
dvidir  = $(docdir)
psdir   = $(docdir)
pdfdir  = $(docdir)
libdir  = $(exec_prefix)/lib
lisplibdir = $(libdir)/$(TOPDIR)
elispdir = $(datarootdir)/emacs/site-lisp
vimdir = $(datarootdir)/vim/vimfiles/after/syntax
# The value of following variable is prepended to all the paths for
# installation. This is useful when preparing a binary distribution.
DESTDIR =

# (partial) list of available add-on modules
# (see directory modules/ for the full list
#  or pass --help-modules to top-level configure):
# queens               the queens function (a toy example)
# dirkey               the directory access (LDAP, win32 registry)
# berkeley-db          the Berkeley DB access
# gdbm                 the GNU DataBase manager
# rawsock              raw socket access
# pcre                 Perl-compatible regular expressions
# clx/mit-clx          classical X11 interface
# clx/new-clx          faster X11 interface (replaces clx/mit-clx)
MODULES = 

# Command line options passed to the configure files of add-on modules
MODULE_CONFIGURE_FLAGS = --with-jitc=llvm

# Programs used by "make":
CC = gcc
LD = g++
CPPFLAGS =  -Igllib
CFLAGS = -arch i386 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -Wno-sign-compare -O2 -fexpensive-optimizations -falign-functions=4 -DUNIX_BINARY_DISTRIB -DUNICODE -DHEAPCODES -DUSE_JITC -Dllvm -DNO_GETTEXT -DNO_SIGSEGV -I.
CPP = gcc -E
CLFLAGS =   -x none
LIBS = -lncurses  -liconv `llvm-config --libs --cflags --ldflags core analysis executionengine jit interpreter native`
X_LIBS =  -L/usr/X11/lib -R/usr/X11/lib

RM = rm -f
RMRF = rm -rf
TOUCH = touch
CP = cp -p
LN_S = ln -s
MV = mv
CAT = cat
GREP = grep
AR = ar
RANLIB = ranlib

# Programs used by "make install":
INSTALL = /usr/bin/install -c
INSTALL_PROGRAM = ${INSTALL}
INSTALL_DATA = ${INSTALL} -m 644

# Programs used by "make distrib":

LIBGCC = `$(CC) -print-libgcc-file-name` # something like /usr/somewhere/libgcc.a
# formatter for manual page
ROFF_MAN = groff -Tascii -mandoc # try "groff -Tascii -mandoc" or "nroff -man"
ROFF_DVI = groff -Tdvi -mandoc # try "groff -Tdvi -mandoc"
ROFF_PS  = groff -Tps -mandoc # try "groff -Tps -mandoc"
DVIPDF = dvipdf

# -------------- End of configurable section --------------------

#
#                       Requirements for add-on modules
#                       -------------------------------
#
# The general layout of add-on modules is described in
#  <http://clisp.cons.org/impnotes/modules.html>.
# The requirements made there (i.e. the existence of a "link.sh" file
# which defines certain variables) make sure that such an add-on module
# can be distributed with CLISP.
#
# If you want an add-on module to be _built_ automatically with CLISP,
# the following additional requirements have to be obeyed.
#
#   1. The module must be located in a subdirectory of clisp's build
#      directory.
#      Examples: clisp/build/wildcard/
#                clisp/build/bindings/glibc/
#
#   2. If the module contains a file called "configure", it is assumed
#      to be a GNU autoconf generated configuration file, and is called
#      with a "--cache-file=..." argument. It should generate platform
#      dependent header files, Makefiles and the like.
#
#   3. The module should contain a Makefile (maybe generated by requirement 2),
#      which defines the following targets:
#
#        clisp-module
#
#           This target builds the file(s) mentioned by the link.sh file.
#           The following makefile variables can be used:
#             CC                 the C compiler used to compile the CLISP source
#             CPPFLAGS           the C compiler flags when compiling some source
#             CFLAGS             the C compiler flags
#             INCLUDES           a directory containing CLISP header files
#             CLFLAGS            the C compiler flags when linking an executable
#             LIBS               the libraries used when linking an executable
#             RANLIB             the name of the "ranlib" command
#             CLISP              a command which calls the already built
#                                "boot" clisp.
#           Typically, you will have rules like this in your Makefile:
#               foo.o : foo.c
#                       $(CC) $(CPPFLAGS) $(CFLAGS) -I$(INCLUDES) -c foo.c
#               foo.fas : foo.lisp
#                       $(CLISP) -c foo.lisp
#
#        clisp-module-distrib
#
#           This target copies the module into a temporary distribution
#           directory, on the same disk.
#           The following makefile variables can be used:
#             distribdir       the name of temporary distribution directory
#             LN               command to make hard links (works also for
#                              symbolic links)
#           Typically, this target will look like this:
#
#               DISTRIBFILES = <the NEW_FILES mentioned in link.sh> <doc files>
#               clisp-module-distrib : clisp-module force
#                       $(LN) $(DISTRIBFILES) $(distribdir)
#
# If these requirements are obeyed, this Makefile will automatically build
# the add-on module and make it part of the "full" distribution -- all you
# need to do is to add its name to the MODULES definition line above.
#

SHELL = /bin/sh

# Add-on modules that are present in all linking sets (including base)
# syscalls             export some POSIX (and other) system calls
# regexp               POSIX regular expressions
# i18n                 Lisp program internationalization
# readline             extra fine REPL controls
BASE_MODULES = i18n syscalls regexp

COMMENT5 = ./comment5
GCTRIGGER = ./gctrigger
VARBRACE = ./varbrace
TXT2C = ./txt2c -I'../'

CFILES = \
spvw.c \
spvwtabf.c \
spvwtabs.c \
spvwtabo.c \
eval.c \
control.c \
encoding.c \
pathname.c \
stream.c \
socket.c \
io.c \
funarg.c \
array.c \
hashtabl.c \
list.c \
package.c \
record.c \
weak.c \
sequence.c \
charstrg.c \
debug.c \
error.c \
misc.c \
time.c \
predtype.c \
symbol.c \
lisparit.c \
i18n.c \
unixaux.c \
built.c \
lispbibl.c \
fsubr.c \
subr.c \
pseudofun.c \
constsym.c \
constobj.c \
unix.c \
xthread.c \
constpack.c \
avl.c \
sort.c \
subrkw.c \
bytecode.c \
spvw_module.c \
spvw_debug.c \
spvw_alloca.c \
spvw_mmap.c \
spvw_multimap.c \
spvw_singlemap.c \
spvw_page.c \
spvw_heap.c \
spvw_global.c \
spvw_gcstat.c \
spvw_space.c \
spvw_mark.c \
spvw_objsize.c \
spvw_update.c \
spvw_fault.c \
spvw_sigsegv.c \
spvw_sigcld.c \
spvw_sigpipe.c \
spvw_sigint.c \
spvw_sigwinch.c \
spvw_sigterm.c \
spvw_garcol.c \
spvw_genera1.c \
spvw_gcmark.c \
spvw_genera2.c \
spvw_weak.c \
spvw_genera3.c \
spvw_allocate.c \
spvw_typealloc.c \
spvw_circ.c \
spvw_walk.c \
spvw_ctype.c \
spvw_language.c \
spvw_memfile.c \
errunix.c \
aridecl.c \
arilev0.c \
arilev1.c \
intelem.c \
intlog.c \
intplus.c \
intcomp.c \
intbyte.c \
intmal.c \
intdiv.c \
intgcd.c \
int2adic.c \
intsqrt.c \
intprint.c \
intread.c \
intserial.c \
rational.c \
sfloat.c \
ffloat.c \
dfloat.c \
lfloat.c \
flo_konv.c \
flo_rest.c \
realelem.c \
realrand.c \
realtran.c \
compelem.c \
comptran.c \
arilev1c.c \
arilev1e.c \
arilev1i.c \
genclisph.c \
noreadline.c \
ari80386.c \
gen.lispbibl.c

OBJECTS = \
spvw.o \
spvwtabf.o \
spvwtabs.o \
spvwtabo.o \
eval.o \
control.o \
encoding.o \
pathname.o \
stream.o \
socket.o \
io.o \
funarg.o \
array.o \
hashtabl.o \
list.o \
package.o \
record.o \
weak.o \
sequence.o \
charstrg.o \
debug.o \
error.o \
misc.o \
time.o \
predtype.o \
symbol.o \
lisparit.o \
i18n.o \
unixaux.o \
built.o \
ari80386.o \
gllib/uniwidth/width.o \
gllib/uniname/uniname.o \
gllib/localcharset.o

LISPFILES = \
init.lisp \
defseq.lisp \
backquote.lisp \
defmacro.lisp \
macros1.lisp \
macros2.lisp \
defs1.lisp \
timezone.lisp \
lambdalist.lisp \
places.lisp \
floatprint.lisp \
defpackage.lisp \
type.lisp \
subtypep.lisp \
clos-package.lisp \
clos-macros.lisp \
clos-class0.lisp \
clos-metaobject1.lisp \
clos-slotdef1.lisp \
clos-stablehash1.lisp \
clos-specializer1.lisp \
clos-class1.lisp \
clos-class2.lisp \
clos-class3.lisp \
defstruct.lisp \
format.lisp \
international.lisp \
savemem.lisp \
functions.lisp \
trace.lisp \
cmacros.lisp \
compiler.lisp \
defs2.lisp \
loop.lisp \
clos.lisp \
clos-stablehash2.lisp \
clos-specializer2.lisp \
clos-specializer3.lisp \
clos-class4.lisp \
clos-class5.lisp \
clos-class6.lisp \
clos-slotdef2.lisp \
clos-slotdef3.lisp \
clos-slots1.lisp \
clos-slots2.lisp \
clos-method1.lisp \
clos-method2.lisp \
clos-method3.lisp \
clos-method4.lisp \
clos-methcomb1.lisp \
clos-methcomb2.lisp \
clos-methcomb3.lisp \
clos-methcomb4.lisp \
clos-genfun1.lisp \
clos-genfun2a.lisp \
clos-genfun2b.lisp \
clos-genfun3.lisp \
clos-genfun4.lisp \
clos-genfun5.lisp \
clos-dependent.lisp \
clos-print.lisp \
clos-custom.lisp \
documentation.lisp \
fill-out.lisp \
disassem.lisp \
condition.lisp \
loadform.lisp \
gstream.lisp \
xcharin.lisp \
keyboard.lisp \
screen.lisp \
runprog.lisp \
query.lisp \
reploop.lisp \
dribble.lisp \
complete.lisp \
pprint.lisp \
describe.lisp \
room.lisp \
edit.lisp \
macros3.lisp \
clhs.lisp \
inspect.lisp \
gray.lisp \
case-sensitive.lisp \
exporting.lisp \
german.lisp \
french.lisp \
spanish.lisp \
russian.lisp \
danish.lisp \
dutch.lisp \
deprecated.lisp

FASFILES = \
init.fas \
defseq.fas \
backquote.fas \
defmacro.fas \
macros1.fas \
macros2.fas \
defs1.fas \
timezone.fas \
lambdalist.fas \
places.fas \
floatprint.fas \
defpackage.fas \
type.fas \
subtypep.fas \
clos-package.fas \
clos-macros.fas \
clos-class0.fas \
clos-metaobject1.fas \
clos-slotdef1.fas \
clos-stablehash1.fas \
clos-specializer1.fas \
clos-class1.fas \
clos-class2.fas \
clos-class3.fas \
defstruct.fas \
format.fas \
international.fas \
savemem.fas \
functions.fas \
trace.fas \
cmacros.fas \
compiler.fas \
defs2.fas \
loop.fas \
clos.fas \
clos-stablehash2.fas \
clos-specializer2.fas \
clos-specializer3.fas \
clos-class4.fas \
clos-class5.fas \
clos-class6.fas \
clos-slotdef2.fas \
clos-slotdef3.fas \
clos-slots1.fas \
clos-slots2.fas \
clos-method1.fas \
clos-method2.fas \
clos-method3.fas \
clos-method4.fas \
clos-methcomb1.fas \
clos-methcomb2.fas \
clos-methcomb3.fas \
clos-methcomb4.fas \
clos-genfun1.fas \
clos-genfun2a.fas \
clos-genfun2b.fas \
clos-genfun3.fas \
clos-genfun4.fas \
clos-genfun5.fas \
clos-dependent.fas \
clos-print.fas \
clos-custom.fas \
documentation.fas \
fill-out.fas \
disassem.fas \
condition.fas \
loadform.fas \
gstream.fas \
xcharin.fas \
keyboard.fas \
screen.fas \
runprog.fas \
query.fas \
reploop.fas \
dribble.fas \
complete.fas \
pprint.fas \
describe.fas \
room.fas \
edit.fas \
macros3.fas \
clhs.fas \
inspect.fas \
gray.fas \
case-sensitive.fas \
exporting.fas \
german.fas \
french.fas \
spanish.fas \
russian.fas \
danish.fas \
dutch.fas \
deprecated.fas \
config.fas

TXTFILES = \
LISP-tutorial.txt \
CLOS-guide.txt \
editors.txt

TESTFASFILES = \
stage/init.fas \
stage/defseq.fas \
stage/backquote.fas \
stage/defmacro.fas \
stage/macros1.fas \
stage/macros2.fas \
stage/defs1.fas \
stage/timezone.fas \
stage/lambdalist.fas \
stage/places.fas \
stage/floatprint.fas \
stage/defpackage.fas \
stage/type.fas \
stage/subtypep.fas \
stage/clos-package.fas \
stage/clos-macros.fas \
stage/clos-class0.fas \
stage/clos-metaobject1.fas \
stage/clos-slotdef1.fas \
stage/clos-stablehash1.fas \
stage/clos-specializer1.fas \
stage/clos-class1.fas \
stage/clos-class2.fas \
stage/clos-class3.fas \
stage/defstruct.fas \
stage/format.fas \
stage/international.fas \
stage/savemem.fas \
stage/functions.fas \
stage/trace.fas \
stage/cmacros.fas \
stage/compiler.fas \
stage/defs2.fas \
stage/loop.fas \
stage/clos.fas \
stage/clos-stablehash2.fas \
stage/clos-specializer2.fas \
stage/clos-specializer3.fas \
stage/clos-class4.fas \
stage/clos-class5.fas \
stage/clos-class6.fas \
stage/clos-slotdef2.fas \
stage/clos-slotdef3.fas \
stage/clos-slots1.fas \
stage/clos-slots2.fas \
stage/clos-method1.fas \
stage/clos-method2.fas \
stage/clos-method3.fas \
stage/clos-method4.fas \
stage/clos-methcomb1.fas \
stage/clos-methcomb2.fas \
stage/clos-methcomb3.fas \
stage/clos-methcomb4.fas \
stage/clos-genfun1.fas \
stage/clos-genfun2a.fas \
stage/clos-genfun2b.fas \
stage/clos-genfun3.fas \
stage/clos-genfun4.fas \
stage/clos-genfun5.fas \
stage/clos-dependent.fas \
stage/clos-print.fas \
stage/clos-custom.fas \
stage/documentation.fas \
stage/fill-out.fas \
stage/disassem.fas \
stage/condition.fas \
stage/loadform.fas \
stage/gstream.fas \
stage/xcharin.fas \
stage/keyboard.fas \
stage/screen.fas \
stage/runprog.fas \
stage/query.fas \
stage/reploop.fas \
stage/dribble.fas \
stage/complete.fas \
stage/pprint.fas \
stage/describe.fas \
stage/room.fas \
stage/edit.fas \
stage/macros3.fas \
stage/clhs.fas \
stage/inspect.fas \
stage/gray.fas \
stage/case-sensitive.fas \
stage/exporting.fas \
stage/german.fas \
stage/french.fas \
stage/spanish.fas \
stage/russian.fas \
stage/danish.fas \
stage/dutch.fas \
stage/deprecated.fas \
stage/config.fas


all : .gdbinit gllib init allc allo lisp.run interpreted.mem halfcompiled.mem lispinit.mem manual modular $(BASE_MODULES) $(MODULES) clisp boot base full

SUBDIRS = gllib
.PHONY: subdirs $(SUBDIRS)

subdirs: $(SUBDIRS)

SUBDIR_CFLAGS = $(CFLAGS) 
$(SUBDIRS):
	mkdir -p $@
	if test ! -f $@/Makefile; then sh config.status --file=$@/Makefile depfiles; fi
	cd $@ && $(MAKE) CFLAGS="$(SUBDIR_CFLAGS)"

gllib/uniwidth/width.o gllib/uniname/uniname.o gllib/localcharset.o : gllib
	cd gllib && $(MAKE) CFLAGS="$(SUBDIR_CFLAGS)"

makemake : makemake.in config.status
	sh config.status --file=makemake

config.h : config.h.in config.status
	sh config.status --header=config.h
	touch config.h

Makefile : makemake
	./makemake --with-jitc=llvm > Makefile.tmp
	$(MV) Makefile Makefile~
	$(MV) Makefile.tmp Makefile

config.status : configure
	$(RM) config.cache
	sh config.status --recheck

am--refresh : config.status Makefile config.h
cflags.h : cflags.h.stamp

cflags.h.stamp : Makefile
	echo '/* generated from Makefile */' > cflags.h.new
	echo '#define CC "$(CC)"' >> cflags.h.new
	echo '#define LD "$(LD)"' >> cflags.h.new
	echo '#define CFLAGS "$(CFLAGS)"' >> cflags.h.new
	echo '#define CPP "$(CPP)"' >> cflags.h.new
	echo '#define CPPLAGS "$(CPPLAGS)"' >> cflags.h.new
	echo '#define CLFLAGS "$(CLFLAGS)"' >> cflags.h.new
	echo '#define LIBS "$(LIBS)"' >> cflags.h.new
	echo '#define X_LIBS "$(X_LIBS)"' >> cflags.h.new
	if cmp cflags.h.new cflags.h > /dev/null 2>&1; then $(RM) cflags.h.new; else $(MV) cflags.h.new cflags.h; fi
	$(TOUCH) cflags.h.stamp

init : intparam.h floatparam.h comment5 gctrigger varbrace txt2c ccmp2c modules.h

intparam.h : intparam.c config.h
	echo '#include "config.h"' > tmp.c
	cat 'intparam.c' >> tmp.c
	$(CC) tmp.c -o intparam
	./intparam > intparam.h
	$(RM) intparam tmp.c

floatparam.h : floatparam.c config.h
	echo '#include "config.h"' > tmp.c
	cat 'floatparam.c' >> tmp.c
	$(CC) tmp.c -o floatparam
	./floatparam > floatparam.h
	$(RM) floatparam tmp.c

UTILCC=$(CC)
comment5 : ../utils/comment5.c
	$(UTILCC) $(CPPFLAGS) $(CFLAGS) $(CLFLAGS)  ../utils/comment5.c -o comment5

gctrigger : ../utils/gctrigger.c
	$(UTILCC) $(CPPFLAGS) $(CFLAGS) $(CLFLAGS)  ../utils/gctrigger.c -o gctrigger

varbrace : ../utils/varbrace.c
	$(UTILCC) $(CPPFLAGS) $(CFLAGS) $(CLFLAGS)  ../utils/varbrace.c -o varbrace

txt2c : ../utils/txt2c.c
	$(UTILCC) $(CPPFLAGS) $(CFLAGS) $(CLFLAGS)  ../utils/txt2c.c -o txt2c

ccmp2c : ../utils/ccmp2c.c
	$(UTILCC) $(CPPFLAGS) $(CFLAGS) $(CLFLAGS)  ../utils/ccmp2c.c -o ccmp2c


allc : init $(CFILES)

spvw.c : spvw.d comment5 gctrigger varbrace
	$(COMMENT5) spvw.d | $(GCTRIGGER) | $(VARBRACE) > spvw.c

spvwtabf.c : spvwtabf.d comment5 gctrigger varbrace
	$(COMMENT5) spvwtabf.d | $(GCTRIGGER) | $(VARBRACE) > spvwtabf.c

spvwtabs.c : spvwtabs.d comment5 gctrigger varbrace
	$(COMMENT5) spvwtabs.d | $(GCTRIGGER) | $(VARBRACE) > spvwtabs.c

spvwtabo.c : spvwtabo.d comment5 gctrigger varbrace
	$(COMMENT5) spvwtabo.d | $(GCTRIGGER) | $(VARBRACE) > spvwtabo.c

eval.c : eval.d comment5 gctrigger varbrace
	$(COMMENT5) eval.d | $(GCTRIGGER) | $(VARBRACE) > eval.c

control.c : control.d comment5 gctrigger varbrace
	$(COMMENT5) control.d | $(GCTRIGGER) | $(VARBRACE) > control.c

encoding.c : encoding.d comment5 gctrigger varbrace
	$(COMMENT5) encoding.d | $(GCTRIGGER) | $(VARBRACE) > encoding.c

pathname.c : pathname.d comment5 gctrigger varbrace
	$(COMMENT5) pathname.d | $(GCTRIGGER) | $(VARBRACE) > pathname.c

stream.c : stream.d comment5 gctrigger varbrace
	$(COMMENT5) stream.d | $(GCTRIGGER) | $(VARBRACE) > stream.c

socket.c : socket.d comment5 gctrigger varbrace
	$(COMMENT5) socket.d | $(GCTRIGGER) | $(VARBRACE) > socket.c

io.c : io.d comment5 gctrigger varbrace
	$(COMMENT5) io.d | $(GCTRIGGER) | $(VARBRACE) > io.c

funarg.c : funarg.d comment5 gctrigger varbrace
	$(COMMENT5) funarg.d | $(GCTRIGGER) | $(VARBRACE) > funarg.c

array.c : array.d comment5 gctrigger varbrace
	$(COMMENT5) array.d | $(GCTRIGGER) | $(VARBRACE) > array.c

hashtabl.c : hashtabl.d comment5 gctrigger varbrace
	$(COMMENT5) hashtabl.d | $(GCTRIGGER) | $(VARBRACE) > hashtabl.c

list.c : list.d comment5 gctrigger varbrace
	$(COMMENT5) list.d | $(GCTRIGGER) | $(VARBRACE) > list.c

package.c : package.d comment5 gctrigger varbrace
	$(COMMENT5) package.d | $(GCTRIGGER) | $(VARBRACE) > package.c

record.c : record.d comment5 gctrigger varbrace
	$(COMMENT5) record.d | $(GCTRIGGER) | $(VARBRACE) > record.c

weak.c : weak.d comment5 gctrigger varbrace
	$(COMMENT5) weak.d | $(GCTRIGGER) | $(VARBRACE) > weak.c

sequence.c : sequence.d comment5 gctrigger varbrace
	$(COMMENT5) sequence.d | $(GCTRIGGER) | $(VARBRACE) > sequence.c

charstrg.c : charstrg.d comment5 gctrigger varbrace
	$(COMMENT5) charstrg.d | $(GCTRIGGER) | $(VARBRACE) > charstrg.c

debug.c : debug.d comment5 gctrigger varbrace
	$(COMMENT5) debug.d | $(GCTRIGGER) | $(VARBRACE) > debug.c

error.c : error.d comment5 gctrigger varbrace
	$(COMMENT5) error.d | $(GCTRIGGER) | $(VARBRACE) > error.c

misc.c : misc.d comment5 gctrigger varbrace
	$(COMMENT5) misc.d | $(GCTRIGGER) | $(VARBRACE) > misc.c

time.c : time.d comment5 gctrigger varbrace
	$(COMMENT5) time.d | $(GCTRIGGER) | $(VARBRACE) > time.c

predtype.c : predtype.d comment5 gctrigger varbrace
	$(COMMENT5) predtype.d | $(GCTRIGGER) | $(VARBRACE) > predtype.c

symbol.c : symbol.d comment5 gctrigger varbrace
	$(COMMENT5) symbol.d | $(GCTRIGGER) | $(VARBRACE) > symbol.c

lisparit.c : lisparit.d comment5 gctrigger varbrace
	$(COMMENT5) lisparit.d | $(GCTRIGGER) | $(VARBRACE) > lisparit.c

i18n.c : i18n.d comment5 gctrigger varbrace
	$(COMMENT5) i18n.d | $(GCTRIGGER) | $(VARBRACE) > i18n.c

unixaux.c : unixaux.d comment5 gctrigger varbrace
	$(COMMENT5) unixaux.d | $(GCTRIGGER) | $(VARBRACE) > unixaux.c

built.c : built.d comment5 gctrigger varbrace
	$(COMMENT5) built.d | $(GCTRIGGER) | $(VARBRACE) > built.c

lispbibl.c : lispbibl.d comment5 gctrigger varbrace
	$(COMMENT5) lispbibl.d | sed -e 's/^\(%% .*\)//' | $(GCTRIGGER) | $(VARBRACE) > lispbibl.c

fsubr.c : fsubr.d comment5 gctrigger varbrace
	$(COMMENT5) fsubr.d | $(GCTRIGGER) | $(VARBRACE) > fsubr.c

subr.c : subr.d comment5 gctrigger varbrace
	$(COMMENT5) subr.d | $(GCTRIGGER) | $(VARBRACE) > subr.c

pseudofun.c : pseudofun.d comment5 gctrigger varbrace
	$(COMMENT5) pseudofun.d | $(GCTRIGGER) | $(VARBRACE) > pseudofun.c

constsym.c : constsym.d comment5 gctrigger varbrace
	$(COMMENT5) constsym.d | $(GCTRIGGER) | $(VARBRACE) > constsym.c

constobj.c : constobj.d comment5 gctrigger varbrace
	$(COMMENT5) constobj.d | $(GCTRIGGER) | $(VARBRACE) > constobj.c

unix.c : unix.d comment5 gctrigger varbrace
	$(COMMENT5) unix.d | $(GCTRIGGER) | $(VARBRACE) > unix.c

xthread.c : xthread.d comment5 gctrigger varbrace
	$(COMMENT5) xthread.d | $(GCTRIGGER) | $(VARBRACE) > xthread.c

constpack.c : constpack.d comment5 gctrigger varbrace
	$(COMMENT5) constpack.d | $(GCTRIGGER) | $(VARBRACE) > constpack.c

avl.c : avl.d comment5 gctrigger varbrace
	$(COMMENT5) avl.d | $(GCTRIGGER) | $(VARBRACE) > avl.c

sort.c : sort.d comment5 gctrigger varbrace
	$(COMMENT5) sort.d | $(GCTRIGGER) | $(VARBRACE) > sort.c

subrkw.c : subrkw.d comment5 gctrigger varbrace
	$(COMMENT5) subrkw.d | $(GCTRIGGER) | $(VARBRACE) > subrkw.c

bytecode.c : bytecode.d comment5 gctrigger varbrace
	$(COMMENT5) bytecode.d | $(GCTRIGGER) | $(VARBRACE) > bytecode.c

spvw_module.c : spvw_module.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_module.d | $(GCTRIGGER) | $(VARBRACE) > spvw_module.c

spvw_debug.c : spvw_debug.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_debug.d | $(GCTRIGGER) | $(VARBRACE) > spvw_debug.c

spvw_alloca.c : spvw_alloca.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_alloca.d | $(GCTRIGGER) | $(VARBRACE) > spvw_alloca.c

spvw_mmap.c : spvw_mmap.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_mmap.d | $(GCTRIGGER) | $(VARBRACE) > spvw_mmap.c

spvw_multimap.c : spvw_multimap.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_multimap.d | $(GCTRIGGER) | $(VARBRACE) > spvw_multimap.c

spvw_singlemap.c : spvw_singlemap.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_singlemap.d | $(GCTRIGGER) | $(VARBRACE) > spvw_singlemap.c

spvw_page.c : spvw_page.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_page.d | $(GCTRIGGER) | $(VARBRACE) > spvw_page.c

spvw_heap.c : spvw_heap.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_heap.d | $(GCTRIGGER) | $(VARBRACE) > spvw_heap.c

spvw_global.c : spvw_global.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_global.d | $(GCTRIGGER) | $(VARBRACE) > spvw_global.c

spvw_gcstat.c : spvw_gcstat.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_gcstat.d | $(GCTRIGGER) | $(VARBRACE) > spvw_gcstat.c

spvw_space.c : spvw_space.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_space.d | $(GCTRIGGER) | $(VARBRACE) > spvw_space.c

spvw_mark.c : spvw_mark.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_mark.d | $(GCTRIGGER) | $(VARBRACE) > spvw_mark.c

spvw_objsize.c : spvw_objsize.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_objsize.d | $(GCTRIGGER) | $(VARBRACE) > spvw_objsize.c

spvw_update.c : spvw_update.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_update.d | $(GCTRIGGER) | $(VARBRACE) > spvw_update.c

spvw_fault.c : spvw_fault.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_fault.d | $(GCTRIGGER) | $(VARBRACE) > spvw_fault.c

spvw_sigsegv.c : spvw_sigsegv.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_sigsegv.d | $(GCTRIGGER) | $(VARBRACE) > spvw_sigsegv.c

spvw_sigcld.c : spvw_sigcld.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_sigcld.d | $(GCTRIGGER) | $(VARBRACE) > spvw_sigcld.c

spvw_sigpipe.c : spvw_sigpipe.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_sigpipe.d | $(GCTRIGGER) | $(VARBRACE) > spvw_sigpipe.c

spvw_sigint.c : spvw_sigint.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_sigint.d | $(GCTRIGGER) | $(VARBRACE) > spvw_sigint.c

spvw_sigwinch.c : spvw_sigwinch.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_sigwinch.d | $(GCTRIGGER) | $(VARBRACE) > spvw_sigwinch.c

spvw_sigterm.c : spvw_sigterm.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_sigterm.d | $(GCTRIGGER) | $(VARBRACE) > spvw_sigterm.c

spvw_garcol.c : spvw_garcol.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_garcol.d | $(GCTRIGGER) | $(VARBRACE) > spvw_garcol.c

spvw_genera1.c : spvw_genera1.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_genera1.d | $(GCTRIGGER) | $(VARBRACE) > spvw_genera1.c

spvw_gcmark.c : spvw_gcmark.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_gcmark.d | $(GCTRIGGER) | $(VARBRACE) > spvw_gcmark.c

spvw_genera2.c : spvw_genera2.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_genera2.d | $(GCTRIGGER) | $(VARBRACE) > spvw_genera2.c

spvw_weak.c : spvw_weak.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_weak.d | $(GCTRIGGER) | $(VARBRACE) > spvw_weak.c

spvw_genera3.c : spvw_genera3.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_genera3.d | $(GCTRIGGER) | $(VARBRACE) > spvw_genera3.c

spvw_allocate.c : spvw_allocate.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_allocate.d | $(GCTRIGGER) | $(VARBRACE) > spvw_allocate.c

spvw_typealloc.c : spvw_typealloc.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_typealloc.d | $(GCTRIGGER) | $(VARBRACE) > spvw_typealloc.c

spvw_circ.c : spvw_circ.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_circ.d | $(GCTRIGGER) | $(VARBRACE) > spvw_circ.c

spvw_walk.c : spvw_walk.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_walk.d | $(GCTRIGGER) | $(VARBRACE) > spvw_walk.c

spvw_ctype.c : spvw_ctype.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_ctype.d | $(GCTRIGGER) | $(VARBRACE) > spvw_ctype.c

spvw_language.c : spvw_language.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_language.d | $(GCTRIGGER) | $(VARBRACE) > spvw_language.c

spvw_memfile.c : spvw_memfile.d comment5 gctrigger varbrace
	$(COMMENT5) spvw_memfile.d | $(GCTRIGGER) | $(VARBRACE) > spvw_memfile.c

errunix.c : errunix.d comment5 gctrigger varbrace
	$(COMMENT5) errunix.d | $(GCTRIGGER) | $(VARBRACE) > errunix.c

aridecl.c : aridecl.d comment5 gctrigger varbrace
	$(COMMENT5) aridecl.d | $(GCTRIGGER) | $(VARBRACE) > aridecl.c

arilev0.c : arilev0.d comment5 gctrigger varbrace
	$(COMMENT5) arilev0.d | $(GCTRIGGER) | $(VARBRACE) > arilev0.c

arilev1.c : arilev1.d comment5 gctrigger varbrace
	$(COMMENT5) arilev1.d | $(GCTRIGGER) | $(VARBRACE) > arilev1.c

intelem.c : intelem.d comment5 gctrigger varbrace
	$(COMMENT5) intelem.d | $(GCTRIGGER) | $(VARBRACE) > intelem.c

intlog.c : intlog.d comment5 gctrigger varbrace
	$(COMMENT5) intlog.d | $(GCTRIGGER) | $(VARBRACE) > intlog.c

intplus.c : intplus.d comment5 gctrigger varbrace
	$(COMMENT5) intplus.d | $(GCTRIGGER) | $(VARBRACE) > intplus.c

intcomp.c : intcomp.d comment5 gctrigger varbrace
	$(COMMENT5) intcomp.d | $(GCTRIGGER) | $(VARBRACE) > intcomp.c

intbyte.c : intbyte.d comment5 gctrigger varbrace
	$(COMMENT5) intbyte.d | $(GCTRIGGER) | $(VARBRACE) > intbyte.c

intmal.c : intmal.d comment5 gctrigger varbrace
	$(COMMENT5) intmal.d | $(GCTRIGGER) | $(VARBRACE) > intmal.c

intdiv.c : intdiv.d comment5 gctrigger varbrace
	$(COMMENT5) intdiv.d | $(GCTRIGGER) | $(VARBRACE) > intdiv.c

intgcd.c : intgcd.d comment5 gctrigger varbrace
	$(COMMENT5) intgcd.d | $(GCTRIGGER) | $(VARBRACE) > intgcd.c

int2adic.c : int2adic.d comment5 gctrigger varbrace
	$(COMMENT5) int2adic.d | $(GCTRIGGER) | $(VARBRACE) > int2adic.c

intsqrt.c : intsqrt.d comment5 gctrigger varbrace
	$(COMMENT5) intsqrt.d | $(GCTRIGGER) | $(VARBRACE) > intsqrt.c

intprint.c : intprint.d comment5 gctrigger varbrace
	$(COMMENT5) intprint.d | $(GCTRIGGER) | $(VARBRACE) > intprint.c

intread.c : intread.d comment5 gctrigger varbrace
	$(COMMENT5) intread.d | $(GCTRIGGER) | $(VARBRACE) > intread.c

intserial.c : intserial.d comment5 gctrigger varbrace
	$(COMMENT5) intserial.d | $(GCTRIGGER) | $(VARBRACE) > intserial.c

rational.c : rational.d comment5 gctrigger varbrace
	$(COMMENT5) rational.d | $(GCTRIGGER) | $(VARBRACE) > rational.c

sfloat.c : sfloat.d comment5 gctrigger varbrace
	$(COMMENT5) sfloat.d | $(GCTRIGGER) | $(VARBRACE) > sfloat.c

ffloat.c : ffloat.d comment5 gctrigger varbrace
	$(COMMENT5) ffloat.d | $(GCTRIGGER) | $(VARBRACE) > ffloat.c

dfloat.c : dfloat.d comment5 gctrigger varbrace
	$(COMMENT5) dfloat.d | $(GCTRIGGER) | $(VARBRACE) > dfloat.c

lfloat.c : lfloat.d comment5 gctrigger varbrace
	$(COMMENT5) lfloat.d | $(GCTRIGGER) | $(VARBRACE) > lfloat.c

flo_konv.c : flo_konv.d comment5 gctrigger varbrace
	$(COMMENT5) flo_konv.d | $(GCTRIGGER) | $(VARBRACE) > flo_konv.c

flo_rest.c : flo_rest.d comment5 gctrigger varbrace
	$(COMMENT5) flo_rest.d | $(GCTRIGGER) | $(VARBRACE) > flo_rest.c

realelem.c : realelem.d comment5 gctrigger varbrace
	$(COMMENT5) realelem.d | $(GCTRIGGER) | $(VARBRACE) > realelem.c

realrand.c : realrand.d comment5 gctrigger varbrace
	$(COMMENT5) realrand.d | $(GCTRIGGER) | $(VARBRACE) > realrand.c

realtran.c : realtran.d comment5 gctrigger varbrace
	$(COMMENT5) realtran.d | $(GCTRIGGER) | $(VARBRACE) > realtran.c

compelem.c : compelem.d comment5 gctrigger varbrace
	$(COMMENT5) compelem.d | $(GCTRIGGER) | $(VARBRACE) > compelem.c

comptran.c : comptran.d comment5 gctrigger varbrace
	$(COMMENT5) comptran.d | $(GCTRIGGER) | $(VARBRACE) > comptran.c

arilev1c.c : arilev1c.d comment5 gctrigger varbrace
	$(COMMENT5) arilev1c.d | $(GCTRIGGER) | $(VARBRACE) > arilev1c.c

arilev1e.c : arilev1e.d comment5 gctrigger varbrace
	$(COMMENT5) arilev1e.d | $(GCTRIGGER) | $(VARBRACE) > arilev1e.c

arilev1i.c : arilev1i.d comment5 gctrigger varbrace
	$(COMMENT5) arilev1i.d | $(GCTRIGGER) | $(VARBRACE) > arilev1i.c

genclisph.c : genclisph.d comment5 gctrigger varbrace
	$(COMMENT5) genclisph.d | $(GCTRIGGER) | $(VARBRACE) > genclisph.c

noreadline.c : noreadline.d comment5 gctrigger varbrace
	$(COMMENT5) noreadline.d | $(GCTRIGGER) | $(VARBRACE) > noreadline.c

ari80386.c : ari80386.d comment5 
	$(COMMENT5) ari80386.d > ari80386.c

ari80386.s : ari80386.c
	$(CPP) -DASM_UNDERSCORE ari80386.c > ari80386.s

gen.lispbibl.c : lispbibl.d comment5
	$(COMMENT5) lispbibl.d | sed -e '/^%% /{s///p;d;}' -e '/^#line /!s/.*//' > gen.lispbibl.c

allo : allc spvw.o spvwtabf.o spvwtabs.o spvwtabo.o eval.o control.o encoding.o pathname.o stream.o socket.o io.o funarg.o array.o hashtabl.o list.o package.o record.o weak.o sequence.o charstrg.o debug.o error.o misc.o time.o predtype.o symbol.o lisparit.o i18n.o unixaux.o built.o

alls : allc spvw.s spvwtabf.s spvwtabs.s spvwtabo.s eval.s control.s encoding.s pathname.s stream.s socket.s io.s funarg.s array.s hashtabl.s list.s package.s record.s weak.s sequence.s charstrg.s debug.s error.s misc.s time.s predtype.s symbol.s lisparit.s i18n.s unixaux.s built.s

# Normally not used (just for debugging).
alli : allc spvw.i spvwtabf.i spvwtabs.i spvwtabo.i eval.i control.i encoding.i pathname.i stream.i socket.i io.i funarg.i array.i hashtabl.i list.i package.i record.i weak.i sequence.i charstrg.i debug.i error.i misc.i time.i predtype.i symbol.i lisparit.i i18n.i unixaux.i built.i

spvw.i : spvw.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c constpack.c avl.c spvw_module.c spvw_debug.c spvw_alloca.c spvw_mmap.c spvw_multimap.c spvw_singlemap.c spvw_page.c spvw_heap.c spvw_global.c spvw_gcstat.c spvw_space.c spvw_mark.c spvw_objsize.c spvw_update.c spvw_fault.c spvw_sigsegv.c spvw_sigcld.c spvw_sigpipe.c spvw_sigint.c spvw_sigwinch.c spvw_sigterm.c spvw_garcol.c spvw_genera1.c spvw_gcmark.c spvw_genera2.c spvw_weak.c spvw_genera3.c spvw_allocate.c spvw_typealloc.c spvw_circ.c spvw_walk.c spvw_ctype.c spvw_language.c spvw_memfile.c sort.c subrkw.c spvw_calendar.c arilev0.c aridecl.c gllib/stdint.h localcharset.h version.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) spvw.c > spvw.i

spvw.s : spvw.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c constpack.c avl.c spvw_module.c spvw_debug.c spvw_alloca.c spvw_mmap.c spvw_multimap.c spvw_singlemap.c spvw_page.c spvw_heap.c spvw_global.c spvw_gcstat.c spvw_space.c spvw_mark.c spvw_objsize.c spvw_update.c spvw_fault.c spvw_sigsegv.c spvw_sigcld.c spvw_sigpipe.c spvw_sigint.c spvw_sigwinch.c spvw_sigterm.c spvw_garcol.c spvw_genera1.c spvw_gcmark.c spvw_genera2.c spvw_weak.c spvw_genera3.c spvw_allocate.c spvw_typealloc.c spvw_circ.c spvw_walk.c spvw_ctype.c spvw_language.c spvw_memfile.c sort.c subrkw.c spvw_calendar.c arilev0.c aridecl.c gllib/stdint.h localcharset.h version.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S spvw.c

spvw.o : spvw.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c constpack.c avl.c spvw_module.c spvw_debug.c spvw_alloca.c spvw_mmap.c spvw_multimap.c spvw_singlemap.c spvw_page.c spvw_heap.c spvw_global.c spvw_gcstat.c spvw_space.c spvw_mark.c spvw_objsize.c spvw_update.c spvw_fault.c spvw_sigsegv.c spvw_sigcld.c spvw_sigpipe.c spvw_sigint.c spvw_sigwinch.c spvw_sigterm.c spvw_garcol.c spvw_genera1.c spvw_gcmark.c spvw_genera2.c spvw_weak.c spvw_genera3.c spvw_allocate.c spvw_typealloc.c spvw_circ.c spvw_walk.c spvw_ctype.c spvw_language.c spvw_memfile.c sort.c subrkw.c spvw_calendar.c arilev0.c aridecl.c gllib/stdint.h localcharset.h version.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c spvw.c

spvwtabf.i : spvwtabf.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) spvwtabf.c > spvwtabf.i

spvwtabf.s : spvwtabf.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S spvwtabf.c

spvwtabf.o : spvwtabf.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c spvwtabf.c

spvwtabs.i : spvwtabs.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) spvwtabs.c > spvwtabs.i

spvwtabs.s : spvwtabs.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S spvwtabs.c

spvwtabs.o : spvwtabs.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c spvwtabs.c

spvwtabo.i : spvwtabo.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) spvwtabo.c > spvwtabo.i

spvwtabo.s : spvwtabo.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S spvwtabo.c

spvwtabo.o : spvwtabo.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c spvwtabo.c

eval.i : eval.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c bytecode.c llvm.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) eval.c > eval.i

eval.s : eval.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c bytecode.c llvm.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S eval.c

eval.o : eval.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c bytecode.c llvm.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) `llvm-config --cflags` -c eval.c

control.i : control.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) control.c > control.i

control.s : control.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S control.c

control.o : control.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c control.c

encoding.i : encoding.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c nls_ascii.c nls_iso8859_1.c nls_iso8859_2.c nls_iso8859_3.c nls_iso8859_4.c nls_iso8859_5.c nls_iso8859_6.c nls_iso8859_7.c nls_iso8859_8.c nls_iso8859_9.c nls_iso8859_10.c nls_iso8859_13.c nls_iso8859_14.c nls_iso8859_15.c nls_iso8859_16.c nls_koi8_r.c nls_koi8_u.c nls_mac_arabic.c nls_mac_centraleurope.c nls_mac_croatian.c nls_mac_cyrillic.c nls_mac_dingbat.c nls_mac_greek.c nls_mac_hebrew.c nls_mac_iceland.c nls_mac_roman.c nls_mac_romania.c nls_mac_symbol.c nls_mac_thai.c nls_mac_turkish.c nls_mac_ukraine.c nls_cp437_ms.c nls_cp437_ibm.c nls_cp737.c nls_cp775.c nls_cp850.c nls_cp852_ms.c nls_cp852_ibm.c nls_cp855.c nls_cp857.c nls_cp860_ms.c nls_cp860_ibm.c nls_cp861_ms.c nls_cp861_ibm.c nls_cp862_ms.c nls_cp862_ibm.c nls_cp863_ms.c nls_cp863_ibm.c nls_cp864_ms.c nls_cp864_ibm.c nls_cp865_ms.c nls_cp865_ibm.c nls_cp866.c nls_cp869_ms.c nls_cp869_ibm.c nls_cp874_ms.c nls_cp874_ibm.c nls_cp1250.c nls_cp1251.c nls_cp1252.c nls_cp1253.c nls_cp1254.c nls_cp1256.c nls_cp1257.c nls_hp_roman8.c nls_nextstep.c nls_jisx0201.c gllib/stdint.h localcharset.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) encoding.c > encoding.i

encoding.s : encoding.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c nls_ascii.c nls_iso8859_1.c nls_iso8859_2.c nls_iso8859_3.c nls_iso8859_4.c nls_iso8859_5.c nls_iso8859_6.c nls_iso8859_7.c nls_iso8859_8.c nls_iso8859_9.c nls_iso8859_10.c nls_iso8859_13.c nls_iso8859_14.c nls_iso8859_15.c nls_iso8859_16.c nls_koi8_r.c nls_koi8_u.c nls_mac_arabic.c nls_mac_centraleurope.c nls_mac_croatian.c nls_mac_cyrillic.c nls_mac_dingbat.c nls_mac_greek.c nls_mac_hebrew.c nls_mac_iceland.c nls_mac_roman.c nls_mac_romania.c nls_mac_symbol.c nls_mac_thai.c nls_mac_turkish.c nls_mac_ukraine.c nls_cp437_ms.c nls_cp437_ibm.c nls_cp737.c nls_cp775.c nls_cp850.c nls_cp852_ms.c nls_cp852_ibm.c nls_cp855.c nls_cp857.c nls_cp860_ms.c nls_cp860_ibm.c nls_cp861_ms.c nls_cp861_ibm.c nls_cp862_ms.c nls_cp862_ibm.c nls_cp863_ms.c nls_cp863_ibm.c nls_cp864_ms.c nls_cp864_ibm.c nls_cp865_ms.c nls_cp865_ibm.c nls_cp866.c nls_cp869_ms.c nls_cp869_ibm.c nls_cp874_ms.c nls_cp874_ibm.c nls_cp1250.c nls_cp1251.c nls_cp1252.c nls_cp1253.c nls_cp1254.c nls_cp1256.c nls_cp1257.c nls_hp_roman8.c nls_nextstep.c nls_jisx0201.c gllib/stdint.h localcharset.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S encoding.c

encoding.o : encoding.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c nls_ascii.c nls_iso8859_1.c nls_iso8859_2.c nls_iso8859_3.c nls_iso8859_4.c nls_iso8859_5.c nls_iso8859_6.c nls_iso8859_7.c nls_iso8859_8.c nls_iso8859_9.c nls_iso8859_10.c nls_iso8859_13.c nls_iso8859_14.c nls_iso8859_15.c nls_iso8859_16.c nls_koi8_r.c nls_koi8_u.c nls_mac_arabic.c nls_mac_centraleurope.c nls_mac_croatian.c nls_mac_cyrillic.c nls_mac_dingbat.c nls_mac_greek.c nls_mac_hebrew.c nls_mac_iceland.c nls_mac_roman.c nls_mac_romania.c nls_mac_symbol.c nls_mac_thai.c nls_mac_turkish.c nls_mac_ukraine.c nls_cp437_ms.c nls_cp437_ibm.c nls_cp737.c nls_cp775.c nls_cp850.c nls_cp852_ms.c nls_cp852_ibm.c nls_cp855.c nls_cp857.c nls_cp860_ms.c nls_cp860_ibm.c nls_cp861_ms.c nls_cp861_ibm.c nls_cp862_ms.c nls_cp862_ibm.c nls_cp863_ms.c nls_cp863_ibm.c nls_cp864_ms.c nls_cp864_ibm.c nls_cp865_ms.c nls_cp865_ibm.c nls_cp866.c nls_cp869_ms.c nls_cp869_ibm.c nls_cp874_ms.c nls_cp874_ibm.c nls_cp1250.c nls_cp1251.c nls_cp1252.c nls_cp1253.c nls_cp1254.c nls_cp1256.c nls_cp1257.c nls_hp_roman8.c nls_nextstep.c nls_jisx0201.c gllib/stdint.h localcharset.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c encoding.c

pathname.i : pathname.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h execname.c
	$(CPP) $(CPPFLAGS) $(CFLAGS) pathname.c > pathname.i

pathname.s : pathname.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h execname.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -S pathname.c

pathname.o : pathname.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h execname.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c pathname.c

stream.i : stream.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) stream.c > stream.i

stream.s : stream.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S stream.c

stream.o : stream.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c stream.c

socket.i : socket.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) socket.c > socket.i

socket.s : socket.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S socket.c

socket.o : socket.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c socket.c

io.i : io.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) io.c > io.i

io.s : io.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S io.c

io.o : io.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c io.c

funarg.i : funarg.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) funarg.c > funarg.i

funarg.s : funarg.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S funarg.c

funarg.o : funarg.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c funarg.c

array.i : array.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) array.c > array.i

array.s : array.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S array.c

array.o : array.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c array.c

hashtabl.i : hashtabl.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c aridecl.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) hashtabl.c > hashtabl.i

hashtabl.s : hashtabl.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c aridecl.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S hashtabl.c

hashtabl.o : hashtabl.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c aridecl.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c hashtabl.c

list.i : list.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) list.c > list.i

list.s : list.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S list.c

list.o : list.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c list.c

package.i : package.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c constpack.c arilev0.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) package.c > package.i

package.s : package.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c constpack.c arilev0.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S package.c

package.o : package.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c constpack.c arilev0.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c package.c

record.i : record.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) record.c > record.i

record.s : record.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S record.c

record.o : record.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c record.c

weak.i : weak.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) weak.c > weak.i

weak.s : weak.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S weak.c

weak.o : weak.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c weak.c

sequence.i : sequence.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) sequence.c > sequence.i

sequence.s : sequence.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S sequence.c

sequence.o : sequence.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c sequence.c

charstrg.i : charstrg.c streq.h cjk.h uniwidth.h unitypes.h uniname.h uninames.h lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c uni_upcase.c uni_downcase.c uni_attribute.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) charstrg.c > charstrg.i

charstrg.s : charstrg.c streq.h cjk.h uniwidth.h unitypes.h uniname.h uninames.h lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c uni_upcase.c uni_downcase.c uni_attribute.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S charstrg.c

charstrg.o : charstrg.c streq.h cjk.h uniwidth.h unitypes.h uniname.h uninames.h lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c uni_upcase.c uni_downcase.c uni_attribute.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c charstrg.c

debug.i : debug.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) debug.c > debug.i

debug.s : debug.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S debug.c

debug.o : debug.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c debug.c

error.i : error.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c errunix.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) error.c > error.i

error.s : error.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c errunix.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S error.c

error.o : error.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c errunix.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c error.c

misc.i : misc.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) misc.c > misc.i

misc.s : misc.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S misc.c

misc.o : misc.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c misc.c

time.i : time.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) time.c > time.i

time.s : time.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S time.c

time.o : time.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c arilev0.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c time.c

predtype.i : predtype.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c avl.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) predtype.c > predtype.i

predtype.s : predtype.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c avl.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S predtype.c

predtype.o : predtype.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c avl.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c predtype.c

symbol.i : symbol.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) symbol.c > symbol.i

symbol.s : symbol.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S symbol.c

symbol.o : symbol.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c symbol.c

lisparit.i : lisparit.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c aridecl.c arilev0.c arilev1.c intelem.c intlog.c intplus.c intcomp.c intbyte.c intmal.c intdiv.c intgcd.c int2adic.c intsqrt.c intprint.c intread.c intserial.c rational.c sfloat.c ffloat.c dfloat.c lfloat.c flo_konv.c flo_rest.c realelem.c realrand.c realtran.c compelem.c comptran.c arilev1c.c arilev1e.c arilev1i.c ari80386.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) lisparit.c > lisparit.i

lisparit.s : lisparit.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c aridecl.c arilev0.c arilev1.c intelem.c intlog.c intplus.c intcomp.c intbyte.c intmal.c intdiv.c intgcd.c int2adic.c intsqrt.c intprint.c intread.c intserial.c rational.c sfloat.c ffloat.c dfloat.c lfloat.c flo_konv.c flo_rest.c realelem.c realrand.c realtran.c compelem.c comptran.c arilev1c.c arilev1e.c arilev1i.c ari80386.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S lisparit.c

lisparit.o : lisparit.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c aridecl.c arilev0.c arilev1.c intelem.c intlog.c intplus.c intcomp.c intbyte.c intmal.c intdiv.c intgcd.c int2adic.c intsqrt.c intprint.c intread.c intserial.c rational.c sfloat.c ffloat.c dfloat.c lfloat.c flo_konv.c flo_rest.c realelem.c realrand.c realtran.c compelem.c comptran.c arilev1c.c arilev1e.c arilev1i.c ari80386.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c lisparit.c

i18n.i : i18n.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) i18n.c > i18n.i

i18n.s : i18n.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S i18n.c

i18n.o : i18n.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c i18n.c

unixaux.i : unixaux.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) unixaux.c > unixaux.i

unixaux.s : unixaux.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S unixaux.c

unixaux.o : unixaux.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c unixaux.c

built.i : built.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h cflags.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) built.c > built.i

built.s : built.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h cflags.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S built.c

built.o : built.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h cflags.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c built.c

genclisph.i : genclisph.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gen.lispbibl.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) -DCOMPILE_STANDALONE genclisph.c > genclisph.i

genclisph.s : genclisph.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gen.lispbibl.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -DCOMPILE_STANDALONE -O0 -S genclisph.c

genclisph.o : genclisph.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gen.lispbibl.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -DCOMPILE_STANDALONE -O0 -c genclisph.c

modules.i : modules.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h clisp.h modules.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) modules.c > modules.i

modules.s : modules.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h clisp.h modules.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S modules.c

modules.o : modules.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h clisp.h modules.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c modules.c

noreadline.i : noreadline.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CPP) $(CPPFLAGS) $(CFLAGS) noreadline.c > noreadline.i

noreadline.s : noreadline.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -S noreadline.c

noreadline.o : noreadline.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c noreadline.c

ari80386.o : ari80386.s
	$(CC) $(CPPFLAGS) $(CFLAGS) -x assembler -c ari80386.s

lisp.a : $(OBJECTS)
	ld -r -o lisp.o $(OBJECTS)
	chmod a-x lisp.o
	if test -f $(LIBGCC) ; then mkdir libgcc ; (cd libgcc ; $(AR) xv $(LIBGCC)) ; $(AR) rcv lisp.a lisp.o libgcc/*.o* ; $(RM) -r libgcc ; else $(AR) rcv lisp.a lisp.o ; fi
	$(RM) lisp.o
	$(RANLIB) lisp.a

libnoreadline.a : noreadline.o
	$(AR) rcv libnoreadline.a noreadline.o
	$(RANLIB) libnoreadline.a

localcharset.h : gllib//localcharset.h
	-$(RM) localcharset.h
	-$(LN_S) gllib//localcharset.h localcharset.h

streq.h : gllib//streq.h
	-$(RM) streq.h
	-$(LN_S) gllib//streq.h streq.h

cjk.h : gllib//uniwidth/cjk.h
	-$(RM) cjk.h
	-$(LN_S) gllib//uniwidth/cjk.h cjk.h

uniwidth.h : gllib//uniwidth.h
	-$(RM) uniwidth.h
	-$(LN_S) gllib//uniwidth.h uniwidth.h

unitypes.h : gllib//unitypes.h
	-$(RM) unitypes.h
	-$(LN_S) gllib//unitypes.h unitypes.h

uniname.h : gllib//uniname.h
	-$(RM) uniname.h
	-$(LN_S) gllib//uniname.h uniname.h

uninames.h : gllib//uniname/uninames.h
	-$(RM) uninames.h
	-$(LN_S) gllib//uniname/uninames.h uninames.h

data : ../utils/unicode/UnicodeDataFull.txt ../doc/Symbol-Table.text
	$(RMRF) data
	mkdir data
	cd data && $(LN_S) ../../utils/unicode/UnicodeDataFull.txt .
	cd data && $(LN_S) ../../doc/Symbol-Table.text .

lisp.run : $(OBJECTS) modules.o   data
	$(LD) $(CFLAGS) $(CLFLAGS) $(OBJECTS) modules.o $(LIBS) -o lisp.run

config.lisp : cfgunix.lisp
	$(CP) cfgunix.lisp config.lisp
	chmod +w config.lisp
	echo '(setq *clhs-root-default* "http://www.lisp.org/HyperSpec/")' >> config.lisp

RUN= ./lisp.run -B . -E UTF-8 -Epathname 1:1 -norc

modprep.fas : ../utils/modprep.lisp lisp.run lispinit.mem
	$(RUN) -M lispinit.mem -q -c ../utils/modprep.lisp -o ./

modprep.lisp : ../utils/modprep.lisp
	-$(RM) modprep.lisp
	-$(LN_S) ../utils/modprep.lisp modprep.lisp


interpreted.mem : lisp.run $(LISPFILES)
	$(RUN) -m 2MW -lp  -x '(and (load "init.lisp") (sys::%saveinitmem) (ext::exit)) (ext::exit t)'
	$(MV) lispimag.mem interpreted.mem

init.fas : init.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c init.lisp -o ./

defseq.fas : defseq.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c defseq.lisp -o ./

backquote.fas : backquote.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c backquote.lisp -o ./

defmacro.fas : defmacro.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c defmacro.lisp -o ./

macros1.fas : macros1.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c macros1.lisp -o ./

macros2.fas : macros2.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c macros2.lisp -o ./

defs1.fas : defs1.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c defs1.lisp -o ./

timezone.fas : timezone.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c timezone.lisp -o ./

lambdalist.fas : lambdalist.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c lambdalist.lisp -o ./

places.fas : places.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c places.lisp -o ./

floatprint.fas : floatprint.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c floatprint.lisp -o ./

defpackage.fas : defpackage.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c defpackage.lisp -o ./

type.fas : type.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c type.lisp -o ./

subtypep.fas : subtypep.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c subtypep.lisp -o ./

clos-package.fas : clos-package.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-package.lisp -o ./

clos-macros.fas : clos-macros.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-macros.lisp -o ./

clos-class0.fas : clos-class0.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-class0.lisp -o ./

clos-metaobject1.fas : clos-metaobject1.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-metaobject1.lisp -o ./

clos-slotdef1.fas : clos-slotdef1.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-slotdef1.lisp -o ./

clos-stablehash1.fas : clos-stablehash1.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-stablehash1.lisp -o ./

clos-specializer1.fas : clos-specializer1.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-specializer1.lisp -o ./

clos-class1.fas : clos-class1.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-class1.lisp -o ./

clos-class2.fas : clos-class2.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-class2.lisp -o ./

clos-class3.fas : clos-class3.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-class3.lisp -o ./

defstruct.fas : defstruct.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c defstruct.lisp -o ./

format.fas : format.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c format.lisp -o ./

international.fas : international.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c international.lisp -o ./

savemem.fas : savemem.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c savemem.lisp -o ./

functions.fas : functions.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c functions.lisp -o ./

trace.fas : trace.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c trace.lisp -o ./

cmacros.fas : cmacros.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c cmacros.lisp -o ./

compiler.fas : compiler.lisp lisp.run interpreted.mem
	$(RUN) -m 2MW -M interpreted.mem -q -c compiler.lisp -o ./

defs2.fas : defs2.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c defs2.lisp -o ./

loop.fas : loop.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c loop.lisp -o ./

clos.fas : clos.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos.lisp -o ./

clos-stablehash2.fas : clos-stablehash2.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-stablehash2.lisp -o ./

clos-specializer2.fas : clos-specializer2.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-specializer2.lisp -o ./

clos-specializer3.fas : clos-specializer3.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-specializer3.lisp -o ./

clos-class4.fas : clos-class4.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-class4.lisp -o ./

clos-class5.fas : clos-class5.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-class5.lisp -o ./

clos-class6.fas : clos-class6.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-class6.lisp -o ./

clos-slotdef2.fas : clos-slotdef2.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-slotdef2.lisp -o ./

clos-slotdef3.fas : clos-slotdef3.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-slotdef3.lisp -o ./

clos-slots1.fas : clos-slots1.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-slots1.lisp -o ./

clos-slots2.fas : clos-slots2.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-slots2.lisp -o ./

clos-method1.fas : clos-method1.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-method1.lisp -o ./

clos-method2.fas : clos-method2.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-method2.lisp -o ./

clos-method3.fas : clos-method3.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-method3.lisp -o ./

clos-method4.fas : clos-method4.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-method4.lisp -o ./

clos-methcomb1.fas : clos-methcomb1.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-methcomb1.lisp -o ./

clos-methcomb2.fas : clos-methcomb2.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-methcomb2.lisp -o ./

clos-methcomb3.fas : clos-methcomb3.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-methcomb3.lisp -o ./

clos-methcomb4.fas : clos-methcomb4.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-methcomb4.lisp -o ./

clos-genfun1.fas : clos-genfun1.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-genfun1.lisp -o ./

clos-genfun2a.fas : clos-genfun2a.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-genfun2a.lisp -o ./

clos-genfun2b.fas : clos-genfun2b.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-genfun2b.lisp -o ./

clos-genfun3.fas : clos-genfun3.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-genfun3.lisp -o ./

clos-genfun4.fas : clos-genfun4.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-genfun4.lisp -o ./

clos-genfun5.fas : clos-genfun5.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-genfun5.lisp -o ./

clos-dependent.fas : clos-dependent.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-dependent.lisp -o ./

clos-print.fas : clos-print.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-print.lisp -o ./

clos-custom.fas : clos-custom.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clos-custom.lisp -o ./

documentation.fas : documentation.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c documentation.lisp -o ./

fill-out.fas : fill-out.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c fill-out.lisp -o ./

disassem.fas : disassem.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c disassem.lisp -o ./

condition.fas : condition.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c condition.lisp -o ./

loadform.fas : loadform.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c loadform.lisp -o ./

gstream.fas : gstream.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c gstream.lisp -o ./

xcharin.fas : xcharin.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c xcharin.lisp -o ./

keyboard.fas : keyboard.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c keyboard.lisp -o ./

screen.fas : screen.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c screen.lisp -o ./

runprog.fas : runprog.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c runprog.lisp -o ./

query.fas : query.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c query.lisp -o ./

reploop.fas : reploop.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c reploop.lisp -o ./

dribble.fas : dribble.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c dribble.lisp -o ./

complete.fas : complete.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c complete.lisp -o ./

pprint.fas : pprint.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c pprint.lisp -o ./

describe.fas : describe.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c describe.lisp -o ./

room.fas : room.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c room.lisp -o ./

edit.fas : edit.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c edit.lisp -o ./

macros3.fas : macros3.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c macros3.lisp -o ./

clhs.fas : clhs.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c clhs.lisp -o ./

inspect.fas : inspect.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c inspect.lisp -o ./

gray.fas : gray.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c gray.lisp -o ./

case-sensitive.fas : case-sensitive.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c case-sensitive.lisp -o ./

exporting.fas : exporting.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c exporting.lisp -o ./

german.fas : german.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c german.lisp -o ./

french.fas : french.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c french.lisp -o ./

spanish.fas : spanish.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c spanish.lisp -o ./

russian.fas : russian.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c russian.lisp -o ./

danish.fas : danish.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c danish.lisp -o ./

dutch.fas : dutch.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c dutch.lisp -o ./

deprecated.fas : deprecated.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c deprecated.lisp -o ./

config.fas : config.lisp lisp.run halfcompiled.mem
	$(RUN) -m 2MW -M halfcompiled.mem -q -c config.lisp

halfcompiled.mem : lisp.run $(LISPFILES) compiler.fas
	$(RUN) -m 2MW -lp  -x '(and (load "init.lisp") (sys::%saveinitmem) (ext::exit)) (ext::exit t)'
	$(MV) lispimag.mem halfcompiled.mem

lispinit.mem : lisp.run $(FASFILES)
	$(RUN) -x "(and (load \"init.fas\") (ext::saveinitmem) (ext::exit)) (ext::exit t)"


# check the sources:
# 1. subr.d, fsubr.d, subrkw.d and all the LISPFUNs must add up
# 2. no variables of type gcv_object_t - only pointers to it
check-sources : # lisp.run lispinit.mem
	$(RUN) -M lispinit.mem -C -i check-lispfun.lisp -x "(check-lisp-defs \"\")"
	if egrep ' var gcv_object_t *[^* ]' *.d; then false; else true; fi

# Test: recompile $(LISPFILES) and compare their contents.
check-recompile : lispinit.mem stage $(TESTFASFILES)
	cmp -s init.fas stage/init.fas  || (echo "Test failed." ; exit 1)
	cmp -s defseq.fas stage/defseq.fas  || (echo "Test failed." ; exit 1)
	cmp -s backquote.fas stage/backquote.fas  || (echo "Test failed." ; exit 1)
	cmp -s defmacro.fas stage/defmacro.fas  || (echo "Test failed." ; exit 1)
	cmp -s macros1.fas stage/macros1.fas  || (echo "Test failed." ; exit 1)
	cmp -s macros2.fas stage/macros2.fas  || (echo "Test failed." ; exit 1)
	cmp -s defs1.fas stage/defs1.fas  || (echo "Test failed." ; exit 1)
	cmp -s timezone.fas stage/timezone.fas  || (echo "Test failed." ; exit 1)
	cmp -s lambdalist.fas stage/lambdalist.fas  || (echo "Test failed." ; exit 1)
	cmp -s places.fas stage/places.fas  || (echo "Test failed." ; exit 1)
	cmp -s floatprint.fas stage/floatprint.fas  || (echo "Test failed." ; exit 1)
	cmp -s defpackage.fas stage/defpackage.fas  || (echo "Test failed." ; exit 1)
	cmp -s type.fas stage/type.fas  || (echo "Test failed." ; exit 1)
	cmp -s subtypep.fas stage/subtypep.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-package.fas stage/clos-package.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-macros.fas stage/clos-macros.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-class0.fas stage/clos-class0.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-metaobject1.fas stage/clos-metaobject1.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-slotdef1.fas stage/clos-slotdef1.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-stablehash1.fas stage/clos-stablehash1.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-specializer1.fas stage/clos-specializer1.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-class1.fas stage/clos-class1.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-class2.fas stage/clos-class2.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-class3.fas stage/clos-class3.fas  || (echo "Test failed." ; exit 1)
	cmp -s defstruct.fas stage/defstruct.fas  || (echo "Test failed." ; exit 1)
	cmp -s format.fas stage/format.fas  || (echo "Test failed." ; exit 1)
	cmp -s international.fas stage/international.fas  || (echo "Test failed." ; exit 1)
	cmp -s savemem.fas stage/savemem.fas  || (echo "Test failed." ; exit 1)
	cmp -s functions.fas stage/functions.fas  || (echo "Test failed." ; exit 1)
	cmp -s trace.fas stage/trace.fas  || (echo "Test failed." ; exit 1)
	cmp -s cmacros.fas stage/cmacros.fas  || (echo "Test failed." ; exit 1)
	cmp -s compiler.fas stage/compiler.fas  || (echo "Test failed." ; exit 1)
	cmp -s defs2.fas stage/defs2.fas  || (echo "Test failed." ; exit 1)
	cmp -s loop.fas stage/loop.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos.fas stage/clos.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-stablehash2.fas stage/clos-stablehash2.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-specializer2.fas stage/clos-specializer2.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-specializer3.fas stage/clos-specializer3.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-class4.fas stage/clos-class4.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-class5.fas stage/clos-class5.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-class6.fas stage/clos-class6.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-slotdef2.fas stage/clos-slotdef2.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-slotdef3.fas stage/clos-slotdef3.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-slots1.fas stage/clos-slots1.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-slots2.fas stage/clos-slots2.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-method1.fas stage/clos-method1.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-method2.fas stage/clos-method2.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-method3.fas stage/clos-method3.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-method4.fas stage/clos-method4.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-methcomb1.fas stage/clos-methcomb1.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-methcomb2.fas stage/clos-methcomb2.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-methcomb3.fas stage/clos-methcomb3.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-methcomb4.fas stage/clos-methcomb4.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-genfun1.fas stage/clos-genfun1.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-genfun2a.fas stage/clos-genfun2a.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-genfun2b.fas stage/clos-genfun2b.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-genfun3.fas stage/clos-genfun3.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-genfun4.fas stage/clos-genfun4.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-genfun5.fas stage/clos-genfun5.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-dependent.fas stage/clos-dependent.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-print.fas stage/clos-print.fas  || (echo "Test failed." ; exit 1)
	cmp -s clos-custom.fas stage/clos-custom.fas  || (echo "Test failed." ; exit 1)
	cmp -s documentation.fas stage/documentation.fas  || (echo "Test failed." ; exit 1)
	cmp -s fill-out.fas stage/fill-out.fas  || (echo "Test failed." ; exit 1)
	cmp -s disassem.fas stage/disassem.fas  || (echo "Test failed." ; exit 1)
	cmp -s condition.fas stage/condition.fas  || (echo "Test failed." ; exit 1)
	cmp -s loadform.fas stage/loadform.fas  || (echo "Test failed." ; exit 1)
	cmp -s gstream.fas stage/gstream.fas  || (echo "Test failed." ; exit 1)
	cmp -s xcharin.fas stage/xcharin.fas  || (echo "Test failed." ; exit 1)
	cmp -s keyboard.fas stage/keyboard.fas  || (echo "Test failed." ; exit 1)
	cmp -s screen.fas stage/screen.fas  || (echo "Test failed." ; exit 1)
	cmp -s runprog.fas stage/runprog.fas  || (echo "Test failed." ; exit 1)
	cmp -s query.fas stage/query.fas  || (echo "Test failed." ; exit 1)
	cmp -s reploop.fas stage/reploop.fas  || (echo "Test failed." ; exit 1)
	cmp -s dribble.fas stage/dribble.fas  || (echo "Test failed." ; exit 1)
	cmp -s complete.fas stage/complete.fas  || (echo "Test failed." ; exit 1)
	cmp -s pprint.fas stage/pprint.fas  || (echo "Test failed." ; exit 1)
	cmp -s describe.fas stage/describe.fas  || (echo "Test failed." ; exit 1)
	cmp -s room.fas stage/room.fas  || (echo "Test failed." ; exit 1)
	cmp -s edit.fas stage/edit.fas  || (echo "Test failed." ; exit 1)
	cmp -s macros3.fas stage/macros3.fas  || (echo "Test failed." ; exit 1)
	cmp -s clhs.fas stage/clhs.fas  || (echo "Test failed." ; exit 1)
	cmp -s inspect.fas stage/inspect.fas  || (echo "Test failed." ; exit 1)
	cmp -s gray.fas stage/gray.fas  || (echo "Test failed." ; exit 1)
	cmp -s case-sensitive.fas stage/case-sensitive.fas  || (echo "Test failed." ; exit 1)
	cmp -s exporting.fas stage/exporting.fas  || (echo "Test failed." ; exit 1)
	cmp -s german.fas stage/german.fas  || (echo "Test failed." ; exit 1)
	cmp -s french.fas stage/french.fas  || (echo "Test failed." ; exit 1)
	cmp -s spanish.fas stage/spanish.fas  || (echo "Test failed." ; exit 1)
	cmp -s russian.fas stage/russian.fas  || (echo "Test failed." ; exit 1)
	cmp -s danish.fas stage/danish.fas  || (echo "Test failed." ; exit 1)
	cmp -s dutch.fas stage/dutch.fas  || (echo "Test failed." ; exit 1)
	cmp -s deprecated.fas stage/deprecated.fas  || (echo "Test failed." ; exit 1)
	cmp -s config.fas stage/config.fas  || (echo "Test failed." ; exit 1)
	echo "Test passed."

stage :
	-mkdir stage

stage/testinit.mem: lispinit.mem
	$(CP) lispinit.mem stage/testinit.mem

stage/init.fas : init.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c init.lisp -o stage/

stage/defseq.fas : defseq.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c defseq.lisp -o stage/

stage/backquote.fas : backquote.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c backquote.lisp -o stage/

stage/defmacro.fas : defmacro.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c defmacro.lisp -o stage/

stage/macros1.fas : macros1.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c macros1.lisp -o stage/

stage/macros2.fas : macros2.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c macros2.lisp -o stage/

stage/defs1.fas : defs1.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c defs1.lisp -o stage/

stage/timezone.fas : timezone.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c timezone.lisp -o stage/

stage/lambdalist.fas : lambdalist.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c lambdalist.lisp -o stage/

stage/places.fas : places.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c places.lisp -o stage/

stage/floatprint.fas : floatprint.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c floatprint.lisp -o stage/

stage/defpackage.fas : defpackage.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c defpackage.lisp -o stage/

stage/type.fas : type.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c type.lisp -o stage/

stage/subtypep.fas : subtypep.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c subtypep.lisp -o stage/

stage/clos-package.fas : clos-package.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-package.lisp -o stage/

stage/clos-macros.fas : clos-macros.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-macros.lisp -o stage/

stage/clos-class0.fas : clos-class0.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-class0.lisp -o stage/

stage/clos-metaobject1.fas : clos-metaobject1.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-metaobject1.lisp -o stage/

stage/clos-slotdef1.fas : clos-slotdef1.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-slotdef1.lisp -o stage/

stage/clos-stablehash1.fas : clos-stablehash1.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-stablehash1.lisp -o stage/

stage/clos-specializer1.fas : clos-specializer1.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-specializer1.lisp -o stage/

stage/clos-class1.fas : clos-class1.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-class1.lisp -o stage/

stage/clos-class2.fas : clos-class2.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-class2.lisp -o stage/

stage/clos-class3.fas : clos-class3.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-class3.lisp -o stage/

stage/defstruct.fas : defstruct.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c defstruct.lisp -o stage/

stage/format.fas : format.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c format.lisp -o stage/

stage/international.fas : international.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c international.lisp -o stage/

stage/savemem.fas : savemem.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c savemem.lisp -o stage/

stage/functions.fas : functions.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c functions.lisp -o stage/

stage/trace.fas : trace.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c trace.lisp -o stage/

stage/cmacros.fas : cmacros.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c cmacros.lisp -o stage/

stage/compiler.fas : compiler.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c compiler.lisp -o stage/

stage/defs2.fas : defs2.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c defs2.lisp -o stage/

stage/loop.fas : loop.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c loop.lisp -o stage/

stage/clos.fas : clos.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos.lisp -o stage/

stage/clos-stablehash2.fas : clos-stablehash2.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-stablehash2.lisp -o stage/

stage/clos-specializer2.fas : clos-specializer2.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-specializer2.lisp -o stage/

stage/clos-specializer3.fas : clos-specializer3.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-specializer3.lisp -o stage/

stage/clos-class4.fas : clos-class4.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-class4.lisp -o stage/

stage/clos-class5.fas : clos-class5.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-class5.lisp -o stage/

stage/clos-class6.fas : clos-class6.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-class6.lisp -o stage/

stage/clos-slotdef2.fas : clos-slotdef2.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-slotdef2.lisp -o stage/

stage/clos-slotdef3.fas : clos-slotdef3.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-slotdef3.lisp -o stage/

stage/clos-slots1.fas : clos-slots1.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-slots1.lisp -o stage/

stage/clos-slots2.fas : clos-slots2.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-slots2.lisp -o stage/

stage/clos-method1.fas : clos-method1.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-method1.lisp -o stage/

stage/clos-method2.fas : clos-method2.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-method2.lisp -o stage/

stage/clos-method3.fas : clos-method3.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-method3.lisp -o stage/

stage/clos-method4.fas : clos-method4.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-method4.lisp -o stage/

stage/clos-methcomb1.fas : clos-methcomb1.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-methcomb1.lisp -o stage/

stage/clos-methcomb2.fas : clos-methcomb2.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-methcomb2.lisp -o stage/

stage/clos-methcomb3.fas : clos-methcomb3.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-methcomb3.lisp -o stage/

stage/clos-methcomb4.fas : clos-methcomb4.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-methcomb4.lisp -o stage/

stage/clos-genfun1.fas : clos-genfun1.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-genfun1.lisp -o stage/

stage/clos-genfun2a.fas : clos-genfun2a.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-genfun2a.lisp -o stage/

stage/clos-genfun2b.fas : clos-genfun2b.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-genfun2b.lisp -o stage/

stage/clos-genfun3.fas : clos-genfun3.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-genfun3.lisp -o stage/

stage/clos-genfun4.fas : clos-genfun4.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-genfun4.lisp -o stage/

stage/clos-genfun5.fas : clos-genfun5.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-genfun5.lisp -o stage/

stage/clos-dependent.fas : clos-dependent.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-dependent.lisp -o stage/

stage/clos-print.fas : clos-print.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-print.lisp -o stage/

stage/clos-custom.fas : clos-custom.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clos-custom.lisp -o stage/

stage/documentation.fas : documentation.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c documentation.lisp -o stage/

stage/fill-out.fas : fill-out.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c fill-out.lisp -o stage/

stage/disassem.fas : disassem.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c disassem.lisp -o stage/

stage/condition.fas : condition.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c condition.lisp -o stage/

stage/loadform.fas : loadform.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c loadform.lisp -o stage/

stage/gstream.fas : gstream.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c gstream.lisp -o stage/

stage/xcharin.fas : xcharin.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c xcharin.lisp -o stage/

stage/keyboard.fas : keyboard.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c keyboard.lisp -o stage/

stage/screen.fas : screen.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c screen.lisp -o stage/

stage/runprog.fas : runprog.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c runprog.lisp -o stage/

stage/query.fas : query.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c query.lisp -o stage/

stage/reploop.fas : reploop.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c reploop.lisp -o stage/

stage/dribble.fas : dribble.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c dribble.lisp -o stage/

stage/complete.fas : complete.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c complete.lisp -o stage/

stage/pprint.fas : pprint.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c pprint.lisp -o stage/

stage/describe.fas : describe.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c describe.lisp -o stage/

stage/room.fas : room.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c room.lisp -o stage/

stage/edit.fas : edit.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c edit.lisp -o stage/

stage/macros3.fas : macros3.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c macros3.lisp -o stage/

stage/clhs.fas : clhs.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c clhs.lisp -o stage/

stage/inspect.fas : inspect.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c inspect.lisp -o stage/

stage/gray.fas : gray.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c gray.lisp -o stage/

stage/case-sensitive.fas : case-sensitive.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c case-sensitive.lisp -o stage/

stage/exporting.fas : exporting.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c exporting.lisp -o stage/

stage/german.fas : german.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c german.lisp -o stage/

stage/french.fas : french.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c french.lisp -o stage/

stage/spanish.fas : spanish.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c spanish.lisp -o stage/

stage/russian.fas : russian.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c russian.lisp -o stage/

stage/danish.fas : danish.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c danish.lisp -o stage/

stage/dutch.fas : dutch.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c dutch.lisp -o stage/

stage/deprecated.fas : deprecated.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c deprecated.lisp -o stage/

stage/config.fas : config.lisp lisp.run stage/testinit.mem
	$(RUN) -m 1MW -M stage/testinit.mem -q -d -c config.lisp -o stage/

lispinit2.mem : lisp.run $(TESTFASFILES)
	$(RUN) -x "(and (cd \"stage/\") (load \"init.fas\") (cd \"../\") (sys::%saveinitmem) (ext::exit)) (ext::exit t)"
	-$(RM) lispinit2.mem
	$(MV) lispimag.mem lispinit2.mem


check-fresh-line : lisp.run lispinit.mem
	-$(RM) fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (dolist (s (quote (*terminal-io* *standard-output* *error-output* *query-io* *debug-io* *trace-output*))) (format t "~S = ~S~%" s (symbol-value s))) (values))' 2>&1 | cat > fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *terminal-io* "~&Line1 to *terminal-io*") (format *terminal-io* "~&Line2 to *terminal-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *terminal-io* "~&Line1 to *terminal-io*") (format *standard-output* "~&Line2 to *standard-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *terminal-io* "~&Line1 to *terminal-io*") (format *error-output* "~&Line2 to *error-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *terminal-io* "~&Line1 to *terminal-io*") (format *query-io* "~&Line2 to *query-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *terminal-io* "~&Line1 to *terminal-io*") (format *debug-io* "~&Line2 to *debug-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *terminal-io* "~&Line1 to *terminal-io*") (format *trace-output* "~&Line2 to *trace-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *standard-output* "~&Line1 to *standard-output*") (format *terminal-io* "~&Line2 to *terminal-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *standard-output* "~&Line1 to *standard-output*") (format *standard-output* "~&Line2 to *standard-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *standard-output* "~&Line1 to *standard-output*") (format *error-output* "~&Line2 to *error-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *standard-output* "~&Line1 to *standard-output*") (format *query-io* "~&Line2 to *query-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *standard-output* "~&Line1 to *standard-output*") (format *debug-io* "~&Line2 to *debug-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *standard-output* "~&Line1 to *standard-output*") (format *trace-output* "~&Line2 to *trace-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *error-output* "~&Line1 to *error-output*") (format *terminal-io* "~&Line2 to *terminal-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *error-output* "~&Line1 to *error-output*") (format *standard-output* "~&Line2 to *standard-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *error-output* "~&Line1 to *error-output*") (format *error-output* "~&Line2 to *error-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *error-output* "~&Line1 to *error-output*") (format *query-io* "~&Line2 to *query-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *error-output* "~&Line1 to *error-output*") (format *debug-io* "~&Line2 to *debug-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *error-output* "~&Line1 to *error-output*") (format *trace-output* "~&Line2 to *trace-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *query-io* "~&Line1 to *query-io*") (format *terminal-io* "~&Line2 to *terminal-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *query-io* "~&Line1 to *query-io*") (format *standard-output* "~&Line2 to *standard-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *query-io* "~&Line1 to *query-io*") (format *error-output* "~&Line2 to *error-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *query-io* "~&Line1 to *query-io*") (format *query-io* "~&Line2 to *query-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *query-io* "~&Line1 to *query-io*") (format *debug-io* "~&Line2 to *debug-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *query-io* "~&Line1 to *query-io*") (format *trace-output* "~&Line2 to *trace-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *debug-io* "~&Line1 to *debug-io*") (format *terminal-io* "~&Line2 to *terminal-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *debug-io* "~&Line1 to *debug-io*") (format *standard-output* "~&Line2 to *standard-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *debug-io* "~&Line1 to *debug-io*") (format *error-output* "~&Line2 to *error-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *debug-io* "~&Line1 to *debug-io*") (format *query-io* "~&Line2 to *query-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *debug-io* "~&Line1 to *debug-io*") (format *debug-io* "~&Line2 to *debug-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *debug-io* "~&Line1 to *debug-io*") (format *trace-output* "~&Line2 to *trace-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *trace-output* "~&Line1 to *trace-output*") (format *terminal-io* "~&Line2 to *terminal-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *trace-output* "~&Line1 to *trace-output*") (format *standard-output* "~&Line2 to *standard-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *trace-output* "~&Line1 to *trace-output*") (format *error-output* "~&Line2 to *error-output*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *trace-output* "~&Line1 to *trace-output*") (format *query-io* "~&Line2 to *query-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *trace-output* "~&Line1 to *trace-output*") (format *debug-io* "~&Line2 to *debug-io*") (values))' 2>&1 | cat >> fresh-line.out
	$(RUN) -q -M lispinit.mem -x '(progn (format *trace-output* "~&Line1 to *trace-output*") (format *trace-output* "~&Line2 to *trace-output*") (values))' 2>&1 | cat >> fresh-line.out
	if grep 'Line1.*Line2' fresh-line.out > /dev/null; then exit 1; fi
	$(RM) fresh-line.out

check-script : lisp.run lispinit.mem
	test `echo '(print (+ 11 99))' | $(RUN) -q -M lispinit.mem -` = 110 || exit 1

check-exec-image: lisp.run lispinit.mem
	$(RUN) -M lispinit.mem -x "(saveinitmem \"foo\" :executable t :norc t)"
	./foo -x "(setq zz 10) (saveinitmem \"foo\")"
	./foo -norc -M foo.mem -x zz
	-ls -l lisp.run lispinit.mem foo foo.mem
	$(RM) foo foo.mem

check-tests : tests lisp.run lispinit.mem
	cd tests && $(MAKE) SHELL='$(SHELL)' LEXE=.run

check-tests-all : tests lisp.run lispinit.mem
	cd tests && $(MAKE) SHELL='$(SHELL)' LEXE=.run clean complete compare

tests :
	-mkdir tests
	cd tests && $(LN_S) ../../tests/Makefile .
	cd tests && $(LN_S) ../../tests/*.lisp .
	cd tests && $(LN_S) ../../tests/*.tst .

# Perform self-tests.
check : check-recompile check-fresh-line check-script check-exec-image check-tests


lispbibl.h : lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h
	(($(CPP) $(CPPFLAGS) $(CFLAGS) -P lispbibl.c | $(GREP) -v "^ *$$") ; ($(CPP) $(CPPFLAGS) $(CFLAGS) -P -dM lispbibl.c | sort) ) > lispbibl.h

gc : lispbibl.h # show GC-related definitions
	egrep '[^[:alpha:]](MEMORY|SPVW|GC|SIGSEGV|SAFETY|ASM|FAST|DEBUG)[^[:alpha:]]' lispbibl.h | grep -v 'define _' | egrep '^#define'


clisp.h clisp-test.c : genclisph.o config.h  intparam.h floatparam.h
	$(CC) $(CFLAGS) $(CLFLAGS) genclisph.o -o genclisph
	(echo '#ifndef _CLISP_H' ; echo '#define _CLISP_H' ; echo; echo '/* config.h */' ; grep '^#' config.h ) > clisp.h
	(echo; echo '/* 'intparam.h' */' ; grep '^#' intparam.h ) >> clisp.h
	(echo; echo '/* 'floatparam.h' */' ; grep '^#' floatparam.h ) >> clisp.h
	(echo; echo '/* genclisph */' ; ./genclisph clisp-test.c; echo ; echo '#endif /* _CLISP_H */') >> clisp.h
	$(CC) $(CPPFLAGS) $(CFLAGS) $(CLFLAGS) -DUSE_CLISP_H=1 -DCOMPILE_STANDALONE clisp-test.c -o clisp-test-clisp
	$(CC) $(CPPFLAGS) $(CFLAGS) $(CLFLAGS) -DUSE_CLISP_H=0 -DCOMPILE_STANDALONE clisp-test.c -o clisp-test-lispbibl
	./clisp-test-clisp > clisp-test-clisp.out
	./clisp-test-lispbibl > clisp-test-lispbibl.out
	cmp clisp-test-clisp.out clisp-test-lispbibl.out
	if grep lispbibl.d clisp.h; then false; else true; fi
	$(RM) genclisph clisp-test-clisp clisp-test-lispbibl clisp-test-clisp.out clisp-test-lispbibl.out

linkkit : modules.c clisp.h modprep.lisp
	-$(RMRF) linkkit
	mkdir linkkit
	cd linkkit && $(LN_S) ../modules.c modules.c
	cd linkkit && $(LN_S) ../clisp.h clisp.h
	cd linkkit && $(LN_S) ../modprep.lisp modprep.lisp

modular : lisp.a libnoreadline.a gllib/uniwidth/width.o gllib/uniname/uniname.o gllib/localcharset.o   clisp-link linkkit modules.h modules.o makevars

makevars : Makefile
	(echo 'CC='"'"'$(CC)'"'" ; echo 'LD='"'"'$(LD)'"'" ; echo 'CPPFLAGS='"'"'$(CPPFLAGS)'"'" ; echo 'CFLAGS='"'"'$(CFLAGS)'"'" ; echo 'CLFLAGS='"'"'$(CLFLAGS)'"'" ; echo 'LIBS='"'"'lisp.a $(LIBS)'"'" ; echo 'X_LIBS='"'"'$(X_LIBS)'"'" ; echo 'RANLIB='"'"'$(RANLIB)'"'" ; echo 'FILES='"'"'lisp.a libnoreadline.a gllib/uniwidth/width.o gllib/uniname/uniname.o gllib/localcharset.o  '"'") > makevars

clisp-link : clisp-link.in
	sed -e 's%@with_dynamic_modules@%no%' -e 's%@createsharedlib@%%' -e 's%@LEXE@%.run%' -e 's%@SHREXT@%.so%'< clisp-link.in > clisp-link
	chmod a+x clisp-link

boot : modular lispinit.mem
	test -d boot || (mkdir boot && cd boot && for f in lisp.a libnoreadline.a gllib/uniwidth/width.o gllib/uniname/uniname.o gllib/localcharset.o   modules.h modules.o lisp.run lispinit.mem; do $(LN_S) ../$$f .; done && ($(GREP) -v '^FILES=' ../makevars; fl=''; for f in lisp.a libnoreadline.a gllib/uniwidth/width.o gllib/uniname/uniname.o gllib/localcharset.o  ; do fl=$$fl' '`basename $$f`; done; echo 'FILES='"'"$$fl"'") > makevars) || ($(RMRF) boot ; exit 1)

anymodule $(BASE_MODULES) $(MODULES) : lisp.run lispinit.mem force modprep.fas clisp.h
	./lndir ../modules/$@ $@
	m=`cd ../modules/$@; pwd`; \
	if test -f $@/configure -a $@/configure -nt $@/config.status ; then cd $@ ; \
	  ( cache=`echo $@/ | sed -e 's,[^/][^/]*//*,../,g'`config.cache; \
	    if test -f $${cache} ; then . $${cache}; \
	      if test "$${ac_cv_env_CC_set}" = set; then CC="$${ac_cv_env_CC_value}"; export CC; fi; \
	      if test "$${ac_cv_env_CFLAGS_set}" = set; then CFLAGS="$${ac_cv_env_CFLAGS_value}"; export CFLAGS; fi; \
	      $(SHELL) ./configure --cache-file=$${cache} --srcdir=$$m $(MODULE_CONFIGURE_FLAGS);\
	    else $(SHELL) ./configure --srcdir=$$m $(MODULE_CONFIGURE_FLAGS); \
	    fi ) ;\
	fi
	CLISP="`pwd`/lisp.run -M `pwd`/lispinit.mem -B `pwd` -E UTF-8 -Epathname 1:1 -norc" ; cd $@ ; dots=`echo $@/ | sed -e 's,[^/][^/]*//*,../,g' -e 's,/$$,,g'` ; $(MAKE) clisp-module CC="$(CC)" CPPFLAGS="$(CPPFLAGS)" CFLAGS="$(CFLAGS)" INCLUDES="$$dots" CLFLAGS="$(CLFLAGS)" LIBS="$(LIBS)" RANLIB="$(RANLIB)" CLISP="$$CLISP -q"

base : modular boot $(BASE_MODULES)
	$(RMRF) base
	CLISP_LINKKIT=. ./clisp-link add-module-sets boot base $(BASE_MODULES) || ($(RMRF) base ; exit 1)

full : modular base $(MODULES)
	$(RMRF) full
	CLISP_LINKKIT=. ./clisp-link add-module-sets base full $(MODULES) || ($(RMRF) full ; exit 1)

base-mod-check : clisp tests # base
	for m in "" $(BASE_MODULES); do test -n "$$m" && $(RM) $$m/*.erg; done
	z=""; for m in "" $(BASE_MODULES); do test -n "$$m" && z=$$z" \""$$m/\"; done; ./clisp  -E UTF-8 -Epathname 1:1 -norc -C -i tests/tests -x "(ext:exit (plusp (or (run-some-tests :dirlist '($$z)) 0)))"

mod-check : base-mod-check # full
	for m in "" $(MODULES); do test -n "$$m" && $(RM) $$m/*.erg; done
	z=""; for m in "" $(MODULES); do test -n "$$m" && z=$$z" \""$$m/\"; done; ./clisp -K full  -E UTF-8 -Epathname 1:1 -norc -C -i tests/tests -x "(ext:exit (plusp (or (run-some-tests :dirlist '($$z)) 0)))"

READMES = ANNOUNCE COPYRIGHT GNU-GPL SUMMARY NEWS README README.de README.es MAGIC.add
IMPNOTES = impnotes.html impnotes.css clisp.png
MANUALS = clisp.1 clisp.html $(TXTFILES) $(IMPNOTES)

impnotes.html : ../doc/impnotes.html
	$(LN_S) ../doc/impnotes.html impnotes.html

impnotes.css : ../doc/impnotes.css
	$(LN_S) ../doc/impnotes.css impnotes.css

clisp.png : ../doc/clisp.png
	$(LN_S) ../doc/clisp.png clisp.png

manual : $(READMES) $(MANUALS) clisp.dvi clisp.ps clisp.pdf

manualx : manual clisp.man

ANNOUNCE : ../ANNOUNCE
	-$(LN_S) ../ANNOUNCE ANNOUNCE

COPYRIGHT : ../COPYRIGHT
	-$(LN_S) ../COPYRIGHT COPYRIGHT

GNU-GPL : ../GNU-GPL
	-$(LN_S) ../GNU-GPL GNU-GPL

SUMMARY : ../SUMMARY
	-$(LN_S) ../SUMMARY SUMMARY

MAGIC.add : ../unix/MAGIC.add
	-$(RM) MAGIC.add
	-$(LN_S) ../unix/MAGIC.add MAGIC.add

README : _README lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h _README.de _README.en txt2c
	$(TXT2C) < _README > txt.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -DCOMPILE_STANDALONE $(CLFLAGS) -O0 txt.c -o txt
	./txt > README
	$(RM) txt.c
	$(RM) txt

README.de : _README.de lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h txt2c
	$(TXT2C) < _README.de > txt.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -DCOMPILE_STANDALONE $(CLFLAGS) -O0 txt.c -o txt
	./txt > README.de
	$(RM) txt.c
	$(RM) txt

README.es : _README.es lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h txt2c
	$(TXT2C) < _README.es > txt.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -DCOMPILE_STANDALONE $(CLFLAGS) -O0 txt.c -o txt
	./txt > README.es
	$(RM) txt.c
	$(RM) txt

clisp.1 : ../doc/_clisp.1 lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h txt2c
	$(TXT2C) < ../doc/_clisp.1 > txt.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -DCOMPILE_STANDALONE $(CLFLAGS) -O0 txt.c -o txt
	./txt | $(GREP) -v '^ *$$' | sed -e "s,@PLATFORM@,i386-apple-darwin9.4.0,g" > clisp.1
	$(RM) txt.c
	$(RM) txt

clisp.html : ../doc/_clisp.html lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h txt2c
	$(TXT2C) < ../doc/_clisp.html > txt.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -DCOMPILE_STANDALONE $(CLFLAGS) -O0 txt.c -o txt
	./txt | sed -e "s,@PLATFORM@,i386-apple-darwin9.4.0,g" > clisp.html
	$(RM) txt.c
	$(RM) txt

clisp-1.html : ../doc/_clisp-1.html lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h txt2c
	$(TXT2C) < ../doc/_clisp-1.html > txt.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -DCOMPILE_STANDALONE $(CLFLAGS) -O0 txt.c -o txt
	./txt | sed -e "s,@PLATFORM@,i386-apple-darwin9.4.0,g" > clisp-1.html
	$(RM) txt.c
	$(RM) txt

clisp.c : _clisp.c lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h txt2c
	$(TXT2C) < _clisp.c > txt.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -DCOMPILE_STANDALONE $(CLFLAGS) -O0 txt.c -o txt
	./txt > clisp.c
	$(RM) txt.c
	$(RM) txt

distmakefile : _distmakefile lispbibl.c fsubr.c subr.c pseudofun.c constsym.c constobj.c unix.c xthread.c gllib/stdint.h localcharset.h txt2c
	$(TXT2C) < _distmakefile > txt.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -DCOMPILE_STANDALONE $(CLFLAGS) -O0 txt.c -o txt
	./txt | sed -e "s,@@LEXE@@,.run,g" > distmakefile
	$(RM) txt.c
	$(RM) txt

clisp.dvi : clisp.1
	-$(ROFF_DVI) clisp.1 > clisp.dvi

clisp.ps : clisp.1
	-$(ROFF_PS) clisp.1 > clisp.ps

clisp.pdf : clisp.dvi
	-$(DVIPDF) clisp.dvi clisp.pdf

clisp.man : clisp.1
	$(ROFF_MAN) clisp.1 > clisp.man

LISP-tutorial.txt : ../doc/LISP-tutorial.txt
	-$(LN_S) ../doc/LISP-tutorial.txt LISP-tutorial.txt

CLOS-guide.txt : ../doc/CLOS-guide.txt
	-$(LN_S) ../doc/CLOS-guide.txt CLOS-guide.txt

editors.txt : ../doc/editors.txt
	-$(LN_S) ../doc/editors.txt editors.txt


clisp : clisp.c
	$(LD) $(CPPFLAGS) $(CFLAGS) $(CLFLAGS) -DENABLE_RELOCATABLE clisp.c $(LIBS)  -o clisp

install : install-bin install-man install-doc

installdirs : force
	mkdir -p $(DESTDIR)$(prefix)
	mkdir -p $(DESTDIR)$(exec_prefix)
	mkdir -p $(DESTDIR)$(libdir)
	mkdir -p $(DESTDIR)$(lisplibdir)
	mkdir -p $(DESTDIR)$(lisplibdir)/data
	mkdir -p $(DESTDIR)$(lisplibdir)/linkkit
	mkdir -p $(DESTDIR)$(lisplibdir)/base
	mkdir -p $(DESTDIR)$(lisplibdir)/full
	mkdir -p $(DESTDIR)$(bindir)
	mkdir -p $(DESTDIR)$(datarootdir)
	mkdir -p $(DESTDIR)$(elispdir)
	mkdir -p $(DESTDIR)$(vimdir)
	mkdir -p $(DESTDIR)$(mandir)
	mkdir -p $(DESTDIR)$(mandir)/man1
	mkdir -p $(DESTDIR)$(htmldir)
	mkdir -p $(DESTDIR)$(dvidir)
	mkdir -p $(DESTDIR)$(psdir)
	mkdir -p $(DESTDIR)$(pdfdir)
	mkdir -p $(DESTDIR)$(docdir)
	mkdir -p $(DESTDIR)$(docdir)/doc

install-bin : lisp.run lispinit.mem clisp.c force
	mkdir -p $(DESTDIR)$(prefix)
	mkdir -p $(DESTDIR)$(exec_prefix)
	mkdir -p $(DESTDIR)$(libdir)
	mkdir -p $(DESTDIR)$(lisplibdir)
	mkdir -p $(DESTDIR)$(lisplibdir)/data
	$(INSTALL_DATA) data/UnicodeDataFull.txt $(DESTDIR)$(lisplibdir)/data/UnicodeDataFull.txt
	$(INSTALL_DATA) data/Symbol-Table.text $(DESTDIR)$(lisplibdir)/data/Symbol-Table.text
	mkdir -p $(DESTDIR)$(lisplibdir)/linkkit
	(cd $(DESTDIR)$(lisplibdir) && $(RMRF) base full)
	mkdir $(DESTDIR)$(lisplibdir)/base
	mkdir $(DESTDIR)$(lisplibdir)/full
	for f in clisp-link linkkit/* base/* full/*; do \
	  case $$f in \
	    */lisp.run) $(INSTALL_PROGRAM) $$f $(DESTDIR)$(lisplibdir)/$$f;; \
	    *) $(INSTALL_DATA) $$f $(DESTDIR)$(lisplibdir)/$$f;; \
	  esac; \
	done
	mkdir -p $(DESTDIR)$(bindir)
	$(CC) $(CPPFLAGS) $(CFLAGS) $(CLFLAGS) -DLISPLIBDIR='"$(lisplibdir)"' -DLOCALEDIR='"$(localedir)"' clisp.c -o $(DESTDIR)$(bindir)/clisp
	mkdir -p $(DESTDIR)$(elispdir)
	$(INSTALL_DATA) ../emacs/clhs.el $(DESTDIR)$(elispdir)/clhs.el
	$(INSTALL_DATA) ../emacs/clisp-coding.el $(DESTDIR)$(elispdir)/clisp-coding.el
	$(INSTALL_DATA) ../emacs/clisp-indent.el $(DESTDIR)$(elispdir)/clisp-indent.el
	$(INSTALL_DATA) ../emacs/clisp-indent.lisp $(DESTDIR)$(elispdir)/clisp-indent.lisp
	$(INSTALL_DATA) ../emacs/clisp-ffi.el $(DESTDIR)$(elispdir)/clisp-ffi.el
	mkdir -p $(DESTDIR)$(vimdir)
	$(INSTALL_DATA) ../emacs/lisp.vim $(DESTDIR)$(vimdir)/lisp.vim

install-man : clisp.1 clisp.dvi clisp.ps clisp.pdf clisp.html force
	mkdir -p $(DESTDIR)$(prefix)
	mkdir -p $(DESTDIR)$(exec_prefix)
	mkdir -p $(DESTDIR)$(datarootdir)
	mkdir -p $(DESTDIR)$(mandir)
	mkdir -p $(DESTDIR)$(mandir)/man1
	$(INSTALL_DATA) clisp.1 $(DESTDIR)$(mandir)/man1/clisp.1
	mkdir -p $(DESTDIR)$(htmldir)
	$(INSTALL_DATA) clisp.html $(DESTDIR)$(htmldir)/clisp.html
	mkdir -p $(DESTDIR)$(dvidir)
	mkdir -p $(DESTDIR)$(psdir)
	mkdir -p $(DESTDIR)$(pdfdir)
	$(INSTALL_DATA) clisp.dvi $(DESTDIR)$(dvidir)/clisp.dvi
	$(INSTALL_DATA) clisp.ps  $(DESTDIR)$(psdir)/clisp.ps
	$(INSTALL_DATA) clisp.pdf $(DESTDIR)$(pdfdir)/clisp.pdf

install-doc : $(READMES) $(MANUALS) clisp.dvi clisp.ps clisp.pdf force
	mkdir -p $(DESTDIR)$(prefix)
	mkdir -p $(DESTDIR)$(exec_prefix)
	mkdir -p $(DESTDIR)$(docdir)
	$(INSTALL_DATA) $(READMES) $(DESTDIR)$(docdir)/
	mkdir -p $(DESTDIR)$(docdir)/doc
	$(INSTALL_DATA) $(MANUALS) clisp.dvi clisp.ps clisp.pdf $(DESTDIR)$(docdir)/doc/


installcheck : tests force
	cd tests && $(MAKE) LISP="$(bindir)/clisp  -E UTF-8 -Epathname 1:1 -norc"


uninstall : uninstall-bin uninstall-man

uninstall-bin : force
	$(RMRF) $(DESTDIR)$(lisplibdir)
	$(RM) $(DESTDIR)$(bindir)/clisp

uninstall-man : force
	$(RM) $(DESTDIR)$(mandir)/man1/clisp.1
	$(RM) $(DESTDIR)$(htmldir)/clisp.html
	$(RM) $(DESTDIR)$(dvidir)/clisp.dvi
	$(RM) $(DESTDIR)$(psdir)/clisp.ps
	$(RM) $(DESTDIR)$(pdfdir)/clisp.pdf
	$(RMRF) $(DESTDIR)$(docdir)
	$(RMRF) $(DESTDIR)$(elispdir)/clhs.el*
	$(RMRF) $(DESTDIR)$(elispdir)/clisp-coding.el*
	$(RMRF) $(DESTDIR)$(elispdir)/clisp-indent.el*
	$(RMRF) $(DESTDIR)$(elispdir)/clisp-indent.lisp*
	$(RMRF) $(DESTDIR)$(elispdir)/clisp-ffi.el*
	$(RMRF) $(DESTDIR)$(vimdir)/lisp.vim*


# tar+gzip
PACKEXT=.tar.gz
COMPRESS=gzip

# Temporary directory for packing
PACKDIR = .

# Distribution file
DISTFILE=$(PACKDIR)/$(TOPDIR)-i386-apple-darwin9.4.0-9.4.0$(PACKEXT)

distrib : force all modular manualx clisp.c distmakefile
	$(RMRF) $(TOPDIR) $(DISTFILE) clisp$(PACKEXT)
	mkdir $(TOPDIR)
	ln ANNOUNCE COPYRIGHT GNU-GPL SUMMARY NEWS README README.de README.es MAGIC.add $(TOPDIR)/
	mkdir $(TOPDIR)/base
	ln `. base/makevars ; for f in $$FILES modules.h modules.o makevars lispinit.mem ; do echo base/$$f ; done` $(TOPDIR)/base/
	cp base/lisp.run $(TOPDIR)/base/lisp.run
	chmod a+x $(TOPDIR)/base/lisp.run
	mkdir $(TOPDIR)/full
	ln `. full/makevars ; for f in $$FILES modules.h modules.o makevars lispinit.mem ; do echo full/$$f ; done` $(TOPDIR)/full/
	cp full/lisp.run $(TOPDIR)/full/lisp.run
	chmod a+x $(TOPDIR)/full/lisp.run
	ln distmakefile $(TOPDIR)/Makefile
	mkdir $(TOPDIR)/data
	ln data/* $(TOPDIR)/data/
	mkdir $(TOPDIR)/doc
	ln clisp.1 clisp.man clisp.dvi clisp.ps clisp.pdf clisp.html $(TXTFILES) $(IMPNOTES) $(TOPDIR)/doc/
	mkdir $(TOPDIR)/emacs
	ln ../emacs/clhs.el $(TOPDIR)/emacs/clhs.el
	ln ../emacs/clisp-coding.el $(TOPDIR)/emacs/clisp-coding.el
	ln ../emacs/clisp-indent.el $(TOPDIR)/emacs/clisp-indent.el
	ln ../emacs/clisp-indent.lisp $(TOPDIR)/emacs/clisp-indent.lisp
	ln ../emacs/clisp-ffi.el $(TOPDIR)/emacs/clisp-ffi.el
	ln ../emacs/lisp.vim $(TOPDIR)/emacs/lisp.vim
	mkdir $(TOPDIR)/src
	ln $(LISPFILES) $(FASFILES) $(TOPDIR)/src/
	ln clisp-link $(TOPDIR)/
	mkdir $(TOPDIR)/linkkit
	ln modules.c clisp.h modprep.lisp $(TOPDIR)/linkkit/
	for module in '' $(BASE_MODULES) $(MODULES); do if test -n "$$module"; then \
	  (dir=$(TOPDIR)/ ; for subdir in `echo $$module/ | sed -e 's,/, ,g'` ; do dir=$${dir}$${subdir} ; test -d $${dir} || mkdir $${dir} ; dir=$${dir}/ ; done ; cd $$module ; dots=`echo $$module/ | sed -e 's,[^/][^/]*//*,../,g'` ; $(MAKE) clisp-module-distrib distribdir=$${dots}$(TOPDIR)/$$module/ LN=ln) \
	fi; done
	$(CC) $(CPPFLAGS) $(CFLAGS) $(CLFLAGS) -DLISPLIBDIR='"$(lisplibdir)"' -DLOCALEDIR='"$(localedir)"' clisp.c -o $(TOPDIR)/clisp
	$(CC) $(CPPFLAGS) $(CFLAGS) $(CLFLAGS) ../utils/hardcode.c -o $(TOPDIR)/hardcode
	chmod a+r $(TOPDIR) $(TOPDIR)/* $(TOPDIR)/*/*
	chmod a+x $(TOPDIR)/. $(TOPDIR)/*/.
	tar cvfh - $(TOPDIR) | $(COMPRESS) > $(DISTFILE)
	ln $(DISTFILE) clisp$(PACKEXT)
	$(RMRF) $(TOPDIR)


# clean0 is harmless: removes only superfluous things: temporary files.
clean0 : force
	-$(RM) core *.core *.stackdump Makefile~ fresh-line.out foo foo.mem clisp-test.c genclisph txt.c txt
	-$(RMRF) linkkit

# clean1 removes everything that becomes obsolete once lisp.run is recompiled
# without changing the bytecode format and the tables in
# constobj.d, constpack.d, constsym.d, subr.d, fsubr.d, pseudofun.d.
clean1 : clean0
	-$(RM) lispbibl.h clisp.h *.i *.s *.o *.a lisp.run clisp-link makevars ansi-tests-log
	-$(RMRF) stage
	-$(RMRF) tests
	-$(RMRF) ansi-tests
	-$(RMRF) sacla-tests
	-$(RMRF) boot base full
	-$(RM) README README.de README.es clisp.1 clisp.man clisp.dvi clisp.ps clisp.pdf clisp.html clisp-1.html $(IMPNOTES) clisp.c distmakefile $(TXTFILES) COPYRIGHT.rtf install.nsi

# clean2 removes everything that becomes obsolete once lisp.run
# is recompiled without changing the bytecode format.
clean2 : clean1
	-$(RM) interpreted.mem halfcompiled.mem lispinit.mem lispinit2.mem

# clean3 removes everything that becomes obsolete once lisp.run
# is recompiled. It leaves everything generated by "make allc".
clean3 : clean2
	-$(RM) $(FASFILES) *.lib
	-$(RM) modprep.fas
	for m in "" $(BASE_MODULES) $(MODULES); do test -n "$$m" && $(RM) $$m/*.fas $$m/*.lib $$m/*.erg; done

# clean4 removes everything that becomes obsolete
# when switching to a new version of the C compiler.
# It leaves everything generated by "make init".
clean4 : clean3
	-$(RM) cflags.h cflags.h.stamp
	-$(RM) $(CFILES)
	-$(RMRF) gllib
# clean5 even undoes "make init".
clean5 : clean4
	-$(RM) ANNOUNCE COPYRIGHT GNU-GPL SUMMARY
	-$(RM) config.lisp
	-$(RM) MAGIC.add
	-$(RMRF) data
	-$(RM) clisp clisp.rc comment5 gctrigger varbrace txt2c ccmp2c

# clean6 lets us go back to "makemake > Makefile".
clean6 : clean5
	-$(RM) Makefile

# clean7 lets us go back to the main "configure".
clean7 : clean6
	-$(RM) config.status config.log config.cache  intparam.h floatparam.h config.h makemake
	-$(RMRF) `ls -d ../modules/*/. | sed -e 's,/\.$$,,' -e 's,^.*/,,' | grep -v '^CVS$$'`

# clean8 moreover cleans up the SRCDIR.
clean8 : clean7

# The normal "start over" command:
mostlyclean : clean4

# Clear all files that are built by "make ...":
clean : clean5

# Make "clear for distribution":
distclean : clean7

# Remove everything that can be generated otherwise:
maintainer-clean : clean8


.SUFFIXES:

force:

